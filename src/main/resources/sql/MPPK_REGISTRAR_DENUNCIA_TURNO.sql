CREATE OR REPLACE PACKAGE SISMPA.MPPK_REGISTRA_DENUNCIA_TURNO IS

	TYPE T_HECHO IS RECORD(
	   --Lugar del hecho
       ID_V_UBIGEO         SISMAEST.CFTM_DIST_GEOGRAFICA.CO_V_UBIGEO_RENIEC%TYPE,
       ID_N_TIPO_LUGAR     SISMPA.MPTV_HECHO.ID_N_TIPO_LUGAR%TYPE,
       ID_N_TIPO_VIA       SISMPA.MPTV_HECHO.ID_N_TIPO_VIA%TYPE,
       DI_V_HECHO          SISMPA.MPTV_HECHO.DI_V_HECHO%TYPE,
       NU_N_DIRECCION      SISMPA.MPTV_HECHO.NU_N_DIRECCION%TYPE,
       CD_V_LATITUD        SISMPA.MPTV_HECHO.CD_V_LATITUD%TYPE,
       CD_V_LONGITUD       SISMPA.MPTV_HECHO.CD_V_LONGITUD%TYPE,
       --Fecha y hora del hecho
       FE_D_HECHO          SISMPA.MPTV_HECHO.FE_D_HECHO%TYPE,
       --Fecha y hora de detencion
       FE_D_DETENCION      SISMPA.MPTV_HECHO.FE_D_DETENCION%TYPE,
       --Descripcion de los hechos
       ID_N_TIPO_HECHO     SISMPA.MPTV_HECHO.ID_N_TIPO_HECHO%TYPE,
       DE_V_NARRATIVA      SISMPA.MPTV_HECHO.DE_V_NARRATIVA%TYPE,
       ID_V_FISCAL         SISEFE.EFTV_FISCAL_ASIGNADO.ID_V_USUARIO%TYPE,
       NU_N_FALLECIDOS     SISMPA.MPTV_HECHO.NU_N_FALLECIDOS%TYPE,
       ID_N_TIPO_ENCARGADO SISMPA.MPTV_HECHO.ID_N_TIPO_ENCARGADO%TYPE
    );

    TYPE CR_HECHOS IS TABLE OF T_HECHO;

    TYPE T_DIRECCION IS RECORD(
    	ID_V_UBIGEO           SISMAEST.CFTM_DIST_GEOGRAFICA.CO_V_UBIGEO_RENIEC%TYPE,
	    ID_N_TIPO_DOMICILIO   SISCFE.CFTV_DIRECCION.ID_N_TIPO_DOMICILIO%TYPE,
	    CO_V_POSTAL           SISCFE.CFTV_DIRECCION.CO_V_POSTAL%TYPE,
	    ID_V_UBIGEO_PUEBLO    SISCFE.CFTV_DIRECCION.ID_V_UBIGEO_PUEBLO%TYPE,
	    ID_N_TIPO_VIA         SISCFE.CFTV_DIRECCION.ID_N_TIPO_VIA%TYPE,
	    DI_V_RESIDENCIA       SISCFE.CFTV_DIRECCION.DI_V_RESIDENCIA%TYPE,
	    NU_N_RESIDENCIA       SISCFE.CFTV_DIRECCION.NU_N_RESIDENCIA%TYPE,
	    ID_N_TIPO_PREF_URB    SISCFE.CFTV_DIRECCION.ID_N_TIPO_PREF_URB%TYPE,
	    DE_V_URBANIZACION     SISCFE.CFTV_DIRECCION.DE_V_URBANIZACION%TYPE,
	    DE_V_BLOCK_DIRECCION  SISCFE.CFTV_DIRECCION.DE_V_BLOCK_DIRECCION%TYPE,
	    DE_V_INTERIOR         SISCFE.CFTV_DIRECCION.DE_V_INTERIOR%TYPE,
	    DE_V_ETAPA            SISCFE.CFTV_DIRECCION.DE_V_ETAPA%TYPE,
	    DE_V_MANZANA          SISCFE.CFTV_DIRECCION.DE_V_MANZANA%TYPE,
	    DE_V_LOTE             SISCFE.CFTV_DIRECCION.DE_V_LOTE%TYPE,
	    DE_V_REFERENCIA       SISCFE.CFTV_DIRECCION.DE_V_REFERENCIA%TYPE,
	    CD_V_LATITUD          SISCFE.CFTV_DIRECCION.CD_V_LATITUD%TYPE,
	    CD_V_LONGITUD         SISCFE.CFTV_DIRECCION.CD_V_LONGITUD%TYPE
    );

    TYPE CR_DIRECCION IS TABLE OF T_DIRECCION;

    TYPE T_CONTACTO IS RECORD(
        ID_N_TIPO_CONTACTO        SISCFE.CFTV_SUJETO_CONTACTO.ID_N_TIPO_CONTACTO%TYPE,
        NO_V_DATOS_CONTACTO       SISCFE.CFTV_SUJETO_CONTACTO.NO_V_DATOS_CONTACTO%TYPE,
        FL_C_CONTACTO_SECUNDARIO  SISCFE.CFTV_SUJETO_CONTACTO.FL_C_CONTACTO_SECUNDARIO%TYPE
    );

    TYPE CR_CONTACTO IS TABLE OF T_CONTACTO;

    TYPE T_PARTE IS RECORD (
        -- SISCFE.CFTV_SUJETO_CASO
   	    ID_N_TIPO_PARTE_SUJETO    SISCFE.CFTV_SUJETO_CASO.ID_N_TIPO_PARTE_SUJETO%TYPE,
   	    ID_N_TIPO_PERSONA         SISCFE.CFTV_SUJETO_CASO.ID_N_TIPO_PERSONA%TYPE,
   	    FL_C_AGRAVIADO            SISCFE.CFTV_SUJETO_CASO.FL_C_AGRAVIADO%TYPE, -- E Estado o S Sociedad
   	    FL_C_DESCONOCIDO          SISCFE.CFTV_SUJETO_CASO.FL_C_DESCONOCIDO%TYPE,
   	    -- SISCFE.CFTV_PERSONA
   	    ID_N_TIPO_DOC_IDENT       SISCFE.CFTV_PERSONA.ID_N_TIPO_DOC_IDENT%TYPE,
   	    NU_V_DOCUMENTO            SISCFE.CFTV_PERSONA.NU_V_DOCUMENTO%TYPE,
   	    -- SISCFE.CFTV_PERSONA_NATURAL
		NO_V_CIUDADANO 			  SISCFE.CFTV_PERSONA_NATURAL.NO_V_CIUDADANO%TYPE,
		AP_V_PATERNO 		      SISCFE.CFTV_PERSONA_NATURAL.AP_V_PATERNO%TYPE,
		AP_V_MATERNO 			  SISCFE.CFTV_PERSONA_NATURAL.AP_V_MATERNO%TYPE,
		FE_D_NACIMIENTO           SISCFE.CFTV_PERSONA_NATURAL.FE_D_NACIMIENTO%TYPE,
		NU_N_EDAD                 SISCFE.CFTV_PERSONA_NATURAL.NU_N_EDAD%TYPE,
		ID_N_EST_CIV              SISCFE.CFTV_PERSONA_NATURAL.ID_N_EST_CIV%TYPE,
		ID_N_GRAD_INST            SISCFE.CFTV_PERSONA_NATURAL.ID_N_GRAD_INST%TYPE,
		ID_N_TIPO_ACT_LABORAL     SISCFE.CFTV_SUJETO_CASO_DETALLE.ID_N_TIPO_ACT_LABORAL%TYPE,
        NO_V_OTRA_ACT_LABORAL     SISCFE.CFTV_SUJETO_CASO_DETALLE.NO_V_OTRA_ACT_LABORAL%TYPE,
		TI_C_SEXO                 SISCFE.CFTV_PERSONA_NATURAL.TI_C_SEXO%TYPE,
		ID_N_TIPO_LENGUA          SISCFE.CFTV_PERSONA_NATURAL.ID_N_TIPO_LENGUA%TYPE,
		ID_N_NACIONALIDAD         SISCFE.CFTV_PERSONA_NATURAL.ID_N_NACIONALIDAD%TYPE,
		ID_N_TIPO_DISCAPACIDAD    SISCFE.CFTV_PERSONA_NATURAL.ID_N_TIPO_DISCAPACIDAD%TYPE,
		ID_N_TIPO_ORIENTACION     SISCFE.CFTV_PERSONA_NATURAL.ID_N_TIPO_ORIENTACION%TYPE,
		ID_N_TIPO_PUEBLO          SISCFE.CFTV_PERSONA_NATURAL.ID_N_TIPO_PUEBLO%TYPE,
		FL_C_TRADUCTOR            SISCFE.CFTV_PERSONA_NATURAL.FL_C_TRADUCTOR%TYPE,
		FL_C_FALLECIDO            SISCFE.CFTV_PERSONA_NATURAL.FL_C_FALLECIDO%TYPE,
		FL_C_AFROPERUANO          SISCFE.CFTV_PERSONA_NATURAL.FL_C_AFROPERUANO%TYPE,
		FL_C_TRAB_HOGAR           SISCFE.CFTV_PERSONA_NATURAL.FL_C_TRAB_HOGAR%TYPE,
		FL_C_VICTIM_VIOLE_8020    SISCFE.CFTV_PERSONA_NATURAL.FL_C_VICTIM_VIOLE_8020%TYPE,
		FL_C_DISCAPACIDAD         SISCFE.CFTV_PERSONA_NATURAL.FL_C_DISCAPACIDAD%TYPE,
		FL_C_PRIV_LIBERTAD        SISCFE.CFTV_PERSONA_NATURAL.FL_C_PRIV_LIBERTAD%TYPE,
		FL_C_VIH_TBC              SISCFE.CFTV_PERSONA_NATURAL.FL_C_VIH_TBC%TYPE,
		FL_C_MIGRANTE             SISCFE.CFTV_PERSONA_NATURAL.FL_C_MIGRANTE%TYPE,
		FL_C_LGTBI                SISCFE.CFTV_PERSONA_NATURAL.FL_C_LGTBI%TYPE,
		FL_C_EXTRANJERO           SISCFE.CFTV_PERSONA_NATURAL.FL_C_EXTRANJERO%TYPE,
		FL_C_VERIFICADO           SISCFE.CFTV_PERSONA_NATURAL.FL_C_VERIFICADO%TYPE,
		ID_N_PAIS                 SISCFE.CFTV_PERSONA_NATURAL.ID_N_PAIS%TYPE,
		NO_V_ALIAS_SUJETO         SISCFE.CFTV_ALIAS_SUJETO.NO_V_ALIAS_SUJETO%TYPE,
		FO_B_SUJETO               BLOB,
		NU_N_PESO                 SISCFE.CFTV_REGISTROS_BIOMETRICOS.NU_N_PESO%TYPE,
		NO_V_MADRE                SISCFE.CFTV_PERSONA_NATURAL.NO_V_MADRE%TYPE,
        AP_V_MADRE_PATERNO        SISCFE.CFTV_PERSONA_NATURAL.AP_V_MADRE_PATERNO%TYPE,
        AP_v_MADRE_MATERNO        SISCFE.CFTV_PERSONA_NATURAL.AP_v_MADRE_MATERNO%TYPE,
        NO_V_PADRE                SISCFE.CFTV_PERSONA_NATURAL.NO_V_PADRE%TYPE,
        AP_V_PADRE_PATERNO        SISCFE.CFTV_PERSONA_NATURAL.AP_V_PADRE_PATERNO%TYPE,
        AP_V_PADRE_MATERNO        SISCFE.CFTV_PERSONA_NATURAL.AP_V_PADRE_MATERNO%TYPE,
		-- CFTV_PERSONA_JURIDICA
   	    DE_V_RAZON_SOCIAL		  SISCFE.CFTV_PERSONA_JURIDICA.DE_V_RAZON_SOCIAL%TYPE,
        DE_V_ACTIV_EMPRESARIAL	  SISCFE.CFTV_PERSONA_JURIDICA.DE_V_ACTIV_EMPRESARIAL%TYPE,
        NO_V_REP_LEGAL 		      SISCFE.CFTV_PERSONA_NATURAL.NO_V_CIUDADANO%TYPE,
		AP_V_PARTERNO_REP_LEGAL   SISCFE.CFTV_PERSONA_NATURAL.AP_V_PATERNO%TYPE,
		AP_V_MATERNO_REP_LEGAL 	  SISCFE.CFTV_PERSONA_NATURAL.AP_V_MATERNO%TYPE,
        ID_N_TIPO_DOC_REP_LEGAL   SISCFE.CFTV_PERSONA.ID_N_TIPO_DOC_IDENT%TYPE,
        NU_V_DOCUMENTO_REP_LEGAL  SISCFE.CFTV_PERSONA.NU_V_DOCUMENTO%TYPE,
        -- SISCFE.CFTV_SUJETO_CONTACTO
        CR_CONTACTO               SISMPA.MPPK_REGISTRA_DENUNCIA_TURNO.CR_CONTACTO,
        -- SISCFE.CFTV_SUJETO_CASO_DETALLE
		FL_C_FUNC_PUBLICO         SISCFE.CFTV_SUJETO_CASO_DETALLE.FL_C_FUNC_PUBLICO%TYPE,
		FL_C_DEFENSOR             SISCFE.CFTV_SUJETO_CASO_DETALLE.FL_C_DEFENSOR%TYPE,
		FL_C_ES_MENOR_DE_EDAD     SISCFE.CFTV_SUJETO_CASO_DETALLE.FL_C_ES_MENOR_DE_EDAD%TYPE,
		FL_C_PROCURADOR           SISCFE.CFTV_SUJETO_CASO_DETALLE.FL_C_PROCURADOR%TYPE,
		-- SISMPA.MPTV_SUJETO_CONDICION
		ID_N_TIPO_COND_SUJETO     SISMPA.MPTV_SUJETO_CONDICION.ID_N_TIPO_COND_SUJETO%TYPE,
        -- DIRECCION
        CR_DIRECCION              SISMPA.MPPK_REGISTRA_DENUNCIA_TURNO.CR_DIRECCION,
        --DATOS ADICIONALES
        ID_N_CARGO_FUNCIONARIO    SISCFE.CFTV_SUJETO_CASO_DETALLE.ID_N_CARGO_FUNCIONARIO%TYPE,
        ID_N_INSTITUCION          SISCFE.CFTV_SUJETO_CASO_DETALLE.ID_N_INSTITUCION%TYPE,
        ID_N_TIPO_DEFENSOR        SISCFE.CFTV_SUJETO_CASO_DETALLE.ID_N_TIPO_DEFENSOR%TYPE,
        FL_C_ASOC_DEFENSORA       SISCFE.CFTV_SUJETO_CASO_DETALLE.FL_C_ASOC_DEFENSORA%TYPE,
        FE_D_VALORIZACION         VARCHAR2(12),
        FE_D_DETENCION         	  VARCHAR2(12),
		ID_N_CARGO_ASOCIACION	  SISCFE.CFTV_SUJETO_CASO_DETALLE.ID_N_CARGO_ASOCIACION%TYPE,
        ID_N_TIPO_VIOLENCIA       SISCFE.CFTV_SUJETO_CASO_DETALLE.ID_N_TIPO_VIOLENCIA%TYPE,
        ID_N_TIPO_RIESGO          SISCFE.CFTV_SUJETO_CASO_DETALLE.ID_N_TIPO_RIESGO%TYPE,
        DE_V_OBSERVACIONES        SISCFE.CFTV_SUJETO_CASO_DETALLE.DE_V_OBSERVACIONES%TYPE
   	);

   	TYPE CR_PARTES IS TABLE OF T_PARTE;

   	TYPE T_DELITO IS RECORD (
   	   ID_N_DELITO            SISMPA.MPTV_DELITO_DENUNCIA.ID_N_DELITO%TYPE,
   	   ID_N_SUBGENERICO       SISMPA.MPTV_DELITO_DENUNCIA.ID_N_SUBGENERICO%TYPE,
   	   ID_N_ESPECIFICO        SISMPA.MPTV_DELITO_DENUNCIA.ID_N_ESPECIFICO%TYPE,
   	   ID_N_TIPO_GRADO_DELITO SISMPA.MPTV_DELITO_DENUNCIA.ID_N_TIPO_GRADO_DELITO%TYPE,
   	   ID_N_ORIGEN_TURNO      SISMPA.MPTV_DELITO_DENUNCIA.ID_N_ORIGEN_TURNO%TYPE
   	);

   	TYPE CR_DELITOS IS TABLE OF T_DELITO;

    TYPE CR_DELITOS_ASOCIADOS IS TABLE OF T_DELITO;

    TYPE T_DETENIDO IS RECORD (
   	    ID_N_TIPO_DOC_IDENT     SISCFE.CFTV_PERSONA.ID_N_TIPO_DOC_IDENT%TYPE,
   	    NU_V_DOCUMENTO          SISCFE.CFTV_PERSONA.NU_V_DOCUMENTO%TYPE,
   	    ID_N_TIPO_PARTE_SUJETO  SISCFE.CFTV_SUJETO_CASO.ID_N_TIPO_PARTE_SUJETO%TYPE,
   	    CR_DELITOS_ASOCIADOS    SISMPA.MPPK_REGISTRA_DENUNCIA_TURNO.CR_DELITOS_ASOCIADOS
   	);

    TYPE CR_DETENIDOS IS TABLE OF T_DETENIDO;

    TYPE T_DATOS_GENERALES IS RECORD (
        ID_N_TIPO_DOC_IDENT   SISCFE.CFTV_PERSONA.ID_N_TIPO_DOC_IDENT%TYPE,
		NU_V_DOCUMENTO		  SISCFE.CFTV_PERSONA.NU_V_DOCUMENTO%TYPE,
		NO_V_CIUDADANO		  SISCFE.CFTV_PERSONA_NATURAL.NO_V_CIUDADANO%TYPE,
		AP_V_PATERNO		  SISCFE.CFTV_PERSONA_NATURAL.AP_V_PATERNO%TYPE,
		AP_V_MATERNO		  SISCFE.CFTV_PERSONA_NATURAL.AP_V_MATERNO%TYPE,
		NU_V_TELEFONO		  SISMPA.MPTV_DENUNCIA_REMITENTE.NU_V_TELEFONO%TYPE,
		DE_V_CORREO			  SISMPA.MPTV_DENUNCIA_REMITENTE.DE_V_CORREO%TYPE,
		NO_V_USUARIO		  VARCHAR2(100),
		ID_N_TIPO_SUJETO	  NUMBER,
		CO_V_DPND_FISCAL	  NUMBER,
        CO_V_DESPACHO         SISEFE.EFTV_CASO.CO_V_DESPACHO%TYPE,
		ID_V_DPND_POLICIAL	  NUMBER,
        CO_V_DISTRITO_FISCAL  SISMAEST.CFTM_DISTRITO_FISCAL.CO_V_DISTRITO_FISCAL%TYPE
    );

    TYPE CR_DATOS_GENERALES IS TABLE OF T_DATOS_GENERALES;


    TYPE REC_ID_DENUNCIA IS RECORD(
        ID_V_DENUNCIA  SISCFE.CFTV_SUJETO_CASO.ID_V_DENUNCIA%TYPE
    );
    TYPE TAB_ID_DENUNCIA IS TABLE OF REC_ID_DENUNCIA;

    TYPE TYPE_PARTICIPANTES_DENUNCIA_DUPLICADA IS RECORD(
        ID_TIPO_DOC_IDENT			SISCFE.CFTV_PERSONA.ID_N_TIPO_DOC_IDENT%TYPE,
        NU_DOCUMENTO 				SISCFE.CFTV_PERSONA.NU_V_DOCUMENTO%TYPE,
        ID_TIPO_PARTE_SUJETO		SISCFE.CFTV_SUJETO_CASO.ID_N_TIPO_PARTE_SUJETO%TYPE
    );
    TYPE PARTICIPANTES_DENUNCIA_DUPLICADA IS TABLE OF TYPE_PARTICIPANTES_DENUNCIA_DUPLICADA;


	TYPE TYPE_DELITO IS RECORD(
	    ID_DELITO              		SISMPA.MPTV_DELITO_DENUNCIA.ID_N_DELITO%TYPE,
	    ID_SUBGENERICO         		SISMPA.MPTV_DELITO_DENUNCIA.ID_N_SUBGENERICO%TYPE,
	    ID_DELITO_ESPECIFICO		SISMPA.MPTV_DELITO_DENUNCIA.ID_N_ESPECIFICO%TYPE
	);
	TYPE DELITO IS TABLE OF TYPE_DELITO;

	/**********************************************************************************
	* Nombre        : SISMPA.MPPK_REGISTRA_DENUNCIA_TURNO.MPSP_REGISTRAR_DENUNCIA_TURNO
	* Autor         : Pedro Yarleque Linares
	* Versión       : 1.0
	* Descripción   : Registrar denuncia en Mesa de Turno.
	* Fecha creación: 17.12.2023
	***********************************************************************************/

	PROCEDURE MPSP_REGISTRAR_DENUNCIA_TURNO(
	   PI_N_TIPO_DENUNCIA     IN SISMPA.MPTV_DENUNCIA.ID_N_TIPO_DENUNCIA%TYPE,
	   PI_V_ID_DENUNCIA       IN SISMPA.MPTV_DENUNCIA.ID_V_DENUNCIA%TYPE,
	   PI_V_ID_CASO           IN SISEFE.EFTV_CASO.ID_V_CASO%TYPE,
	   PI_CR_DATOS_GENERALES  IN SISMPA.MPPK_REGISTRA_DENUNCIA_TURNO.CR_DATOS_GENERALES,
	   PI_CR_HECHOS           IN SISMPA.MPPK_REGISTRA_DENUNCIA_TURNO.CR_HECHOS,
	   PI_CR_PARTES           IN SISMPA.MPPK_REGISTRA_DENUNCIA_TURNO.CR_PARTES,
	   PI_CR_DELITOS          IN SISMPA.MPPK_REGISTRA_DENUNCIA_TURNO.CR_DELITOS,
	   PI_CR_DETENIDOS        IN SISMPA.MPPK_REGISTRA_DENUNCIA_TURNO.CR_DETENIDOS,
	   PI_V_ID_ESPECIALIDAD   IN SISMAEST.CFTM_PLAZO_TURNO.ID_V_ESPECIALIDAD%TYPE,
	   PI_V_CO_US_CREACION    IN SISMPA.MPTV_DENUNCIA.CO_V_US_CREACION%TYPE,
	   PO_V_ID_CASO           OUT SISEFE.EFTV_CASO.ID_V_CASO%TYPE,
	   PO_V_CO_CASO           OUT SISEFE.EFTV_CASO.CO_V_CASO%TYPE,
	   PO_V_CO_ENTIDAD        OUT SISEFE.EFTV_CASO.CO_V_ENTIDAD%TYPE,
       PO_N_ID_TIPO_ENTIDAD   OUT SISEFE.EFTV_CASO.ID_N_TIPO_ENTIDAD%TYPE,
       PO_V_FE_CREACION		  OUT DATE,
       PO_V_ERR_COD           OUT VARCHAR2,
	   PO_V_ERR_MSG           OUT VARCHAR2
	);

	/********************************************************************************
    * Nombre        : SISMPA.MPPK_REGISTRA_DENUNCIA_TURNO.MPSP_REGISTRAR_HECHOS_CASO
    * Autor         : Adolfo Villanueva Paravicino
    * Versión       : 1.0
    * Descripción   : Registrar los hechos
    * Fecha creación: 28.11.2023
    **********************************************************************************/

    PROCEDURE MPSP_REGISTRAR_HECHOS_CASO(
        PI_V_ID_DENUNCIA       IN SISMPA.MPTV_DENUNCIA.ID_V_DENUNCIA%TYPE,
	    PI_V_ID_CASO           IN SISEFE.EFTV_CASO.ID_V_CASO%TYPE,
    	PI_ID_V_UBIGEO         IN SISMAEST.CFTM_DIST_GEOGRAFICA.CO_V_UBIGEO_RENIEC%TYPE,
        PI_ID_N_TIPO_LUGAR     IN SISMPA.MPTV_HECHO.ID_N_TIPO_LUGAR%TYPE,
        PI_ID_N_TIPO_VIA       IN SISMPA.MPTV_HECHO.ID_N_TIPO_VIA%TYPE,
        PI_DI_V_HECHO          IN SISMPA.MPTV_HECHO.DI_V_HECHO%TYPE,
        PI_NU_N_DIRECCION      IN SISMPA.MPTV_HECHO.NU_N_DIRECCION%TYPE,
        PI_CD_V_LATITUD        IN SISMPA.MPTV_HECHO.CD_V_LATITUD%TYPE,
        PI_CD_V_LONGITUD       IN SISMPA.MPTV_HECHO.CD_V_LONGITUD%TYPE,
        PI_FE_D_HECHO          IN SISMPA.MPTV_HECHO.FE_D_HECHO%TYPE,
        PI_ID_N_TIPO_HECHO     IN SISMPA.MPTV_HECHO.ID_N_TIPO_HECHO%TYPE,
        PI_DE_V_NARRATIVA      IN SISMPA.MPTV_HECHO.DE_V_NARRATIVA%TYPE,
        PI_FE_D_DETENCION      IN SISMPA.MPTV_HECHO.FE_D_DETENCION%TYPE,
        PI_NU_N_FALLECIDOS     IN SISMPA.MPTV_HECHO.NU_N_FALLECIDOS%TYPE,
        PI_ID_N_TIPO_ENCARGADO IN SISMPA.MPTV_HECHO.ID_N_TIPO_ENCARGADO%TYPE,
        PI_V_CO_US_CREACION    IN SISMPA.MPTV_DENUNCIA.CO_V_US_CREACION%TYPE,
        PO_V_ERR_COD           OUT VARCHAR2,
        PO_V_ERR_MSG           OUT VARCHAR2
    );

    /****************************************************************************************
    * Nombre        : SISMPA.MPPK_REGISTRA_DENUNCIA_TURNO.MPSP_REGISTRAR_PARTES_INVOLUCRADAS
    * Autor         : Pedro Yarleque Linares
    * Versión       : 1.0
    * Descripción   : Registrar las partes involucradas
    * Fecha creación: 08.01.2024
    *****************************************************************************************/

    PROCEDURE MPSP_REGISTRAR_PARTES_INVOLUCRADAS(
        PI_V_ID_DENUNCIA     IN SISMPA.MPTV_DENUNCIA.ID_V_DENUNCIA%TYPE,
	    PI_V_ID_CASO         IN SISEFE.EFTV_CASO.ID_V_CASO%TYPE,
	    PI_D_FE_DETENCION    IN SISMPA.MPTV_SUJETO_CONDICION.FE_D_DETENCION%TYPE,
    	PI_CR_PARTES         IN SISMPA.MPPK_REGISTRA_DENUNCIA_TURNO.CR_PARTES,
    	PI_V_ID_ESPECIALIDAD IN SISMAEST.CFTM_PLAZO_TURNO.ID_V_ESPECIALIDAD%TYPE,
    	PI_V_CO_US_CREACION  IN SISMPA.MPTV_DENUNCIA.CO_V_US_CREACION%TYPE,
        PO_V_ERR_COD         OUT VARCHAR2,
        PO_V_ERR_MSG         OUT VARCHAR2
    );

    /***********************************************************************************************
	* Nombre        : SISMPA.MPPK_REGISTRA_DENUNCIA_TURNO.MPSP_REGISTRAR_MOVIMIENTO_INGRESO_DENUNCIA
	* Autor         : Pedro Yarleque Linares
	* Versión       : 1.0
	* Descripción   : Registrar movimiento de caso de cargo de ingreso de denuncia
	* Fecha creación: 12.01.2024
	************************************************************************************************/

	PROCEDURE MPSP_REGISTRAR_MOVIMIENTO_INGRESO_DENUNCIA(
		PI_V_ID_CASO            IN SISEFE.EFTV_MOVIMIENTO.ID_V_CASO%TYPE,
		PI_V_CO_US_CREACION     IN SISEFE.EFTV_MOVIMIENTO.CO_V_US_CREACION%TYPE,
		PO_V_ID_MOVIMIENTO      OUT VARCHAR2,
		PO_D_FE_CREACION        OUT VARCHAR2,
		PO_V_ERR_COD            OUT VARCHAR2,
		PO_V_ERR_MSG            OUT VARCHAR2
	);

    /*************************************************************************************************
	* Nombre        : SISMPA.MPPK_REGISTRA_DENUNCIA_TURNO.MPSP_OBTENER_DATOS_GENERALES_DENUNCIA_OFICIO
	* Autor         : Pedro Yarleque Linares
	* Versión       : 1.0
	* Descripción   : Obtener datos generales de la denuncia para los casos de Investigación de Oficio
	* Fecha creación: 16.01.2024
	**************************************************************************************************/

	PROCEDURE MPSP_OBTENER_DATOS_GENERALES_DENUNCIA_OFICIO(
		PI_V_ID_CASO            IN SISEFE.EFTV_MOVIMIENTO.ID_V_CASO%TYPE,
		PO_CR_DATOS_GENERALES   OUT SYS_REFCURSOR,
		PO_V_ERR_COD            OUT VARCHAR2,
		PO_V_ERR_MSG            OUT VARCHAR2
	);

	/**************************************************************************************************
	* Nombre        : SISMPA.MPPK_REGISTRA_DENUNCIA_TURNO.MPSP_FOLIAR_DOCUMENTOS_REGISTRADOS
	* Autor         : Pedro Yarleque Linares
	* Versión       : 1.0
	* Descripción   : Luego de Registrar el Cargo de Ingreso de Denuncia, se realiza el foliado de los
	*                 documentos subidos que incluye tanto el cargo de ingreso de denuncia como las
	*                 actas que hayan podido ser registradas.
	* Fecha creación: 16.01.2024
	***************************************************************************************************/

	PROCEDURE MPSP_FOLIAR_DOCUMENTOS_REGISTRADOS(
		PI_V_ID_CASO            IN SISEFE.EFTV_MOVIMIENTO.ID_V_CASO%TYPE,
		PI_V_CO_US_MODIFICACION IN SISEFE.EFTV_MOVIMIENTO.CO_V_US_MODIFICACION%TYPE,
		PO_V_ERR_COD            OUT VARCHAR2,
		PO_V_ERR_MSG            OUT VARCHAR2
	);

	/*********************************************************************************
	* Nombre        : SISMPA.MPPK_REGISTRA_DENUNCIA_TURNO.MPSP_REGISTRAR_FOTO_SUJETO
	* Autor         : Pedro Yarleque Linares
	* Versión       : 1.0
	* Descripción   : Registrar foto del sujeto caso
	* Fecha creación: 30.01.2024
	**********************************************************************************/

	PROCEDURE MPSP_REGISTRAR_FOTO_SUJETO(
	    PI_BL_FOTO_SUJETO        IN BLOB,
	    PI_N_NU_PESO             IN SISCFE.CFTV_REGISTROS_BIOMETRICOS.NU_N_PESO%TYPE,
	    PI_V_ID_SUJETO_CASO      IN SISCFE.CFTV_SUJETO_CASO.ID_V_SUJETO_cASO%TYPE,
	    PI_V_ID_PERSONA          IN SISCFE.CFTV_PERSONA_NATURAL.ID_V_PERSONA_NATURAL%TYPE,
	    PI_V_NO_DOCUMENTO_ORIGEN IN SISCFE.CFTV_REGISTROS_BIOMETRICOS.NO_V_DOCUMENTO_ORIGEN%TYPE,
	    PI_V_CO_US_CREACION      IN SISCFE.CFTV_REGISTROS_BIOMETRICOS.CO_V_US_CREACION%TYPE,
	    PO_V_ERR_COD             OUT VARCHAR2,
	    PO_V_ERR_MSG             OUT VARCHAR2
    );

    /*********************************************************************************
	* Nombre        : SISMPA.MPPK_REGISTRA_DENUNCIA_TURNO.MPFN_OBTENER_ESPECIALIDAD
	* Autor         : Pedro Yarleque Linares
	* Versión       : 1.0
	* Descripción   : Función para obtener la descripción de la especialidad
	* Fecha creación: 21.02.2024
	**********************************************************************************/

    FUNCTION MPFN_OBTENER_ESPECIALIDAD (
        PI_V_ID_ESPECIALIDAD   SISMAEST.CFTM_ESPECIALIDAD.ID_V_ESPECIALIDAD%TYPE
    )
    RETURN VARCHAR2;


    PROCEDURE MPSP_IDENTIFICAR_DENUNCIA_DUPLICADA (
  		PI_CU_PARTICIPANTES_DENUNCIA_DUPLICADA		IN PARTICIPANTES_DENUNCIA_DUPLICADA,
        PI_CU_DELITOS_DENUNCIA_DUPLICADA 			IN DELITO,
        PO_V_CO_RESPUESTA        					OUT VARCHAR2,
        PO_V_CO_CASO             					OUT VARCHAR2,
        PO_V_ERR_COD             					OUT VARCHAR2,
        PO_V_ERR_MSG             					OUT VARCHAR2);

END MPPK_REGISTRA_DENUNCIA_TURNO;

/

CREATE OR REPLACE PACKAGE BODY SISMPA.MPPK_REGISTRA_DENUNCIA_TURNO IS

	V_V_COD_OK VARCHAR2(40) := '0';
    V_V_MSG_OK VARCHAR2(200) := 'LA OPERACION SE REALIZÓ SATISFACTORIAMENTE';

    V_V_COD_ERR VARCHAR2(40) := '0';
    V_V_MSG_ERR VARCHAR2(200) := '';

    EX_CONTROLADO EXCEPTION;

	/**********************************************************************************
	* Nombre        : SISMPA.MPPK_REGISTRA_DENUNCIA_TURNO.MPSP_REGISTRAR_DENUNCIA_TURNO
	* Autor         : Pedro Yarleque Linares
	* Versión       : 1.0
	* Descripción   : Registrar denuncia en Mesa de Turno.
	* Fecha creación: 17.12.2023
	***********************************************************************************/

	PROCEDURE MPSP_REGISTRAR_DENUNCIA_TURNO(
	   PI_N_TIPO_DENUNCIA     IN SISMPA.MPTV_DENUNCIA.ID_N_TIPO_DENUNCIA%TYPE,
	   PI_V_ID_DENUNCIA       IN SISMPA.MPTV_DENUNCIA.ID_V_DENUNCIA%TYPE,
	   PI_V_ID_CASO           IN SISEFE.EFTV_CASO.ID_V_CASO%TYPE,
	   PI_CR_DATOS_GENERALES  IN SISMPA.MPPK_REGISTRA_DENUNCIA_TURNO.CR_DATOS_GENERALES,
	   PI_CR_HECHOS           IN SISMPA.MPPK_REGISTRA_DENUNCIA_TURNO.CR_HECHOS,
	   PI_CR_PARTES           IN SISMPA.MPPK_REGISTRA_DENUNCIA_TURNO.CR_PARTES,
	   PI_CR_DELITOS          IN SISMPA.MPPK_REGISTRA_DENUNCIA_TURNO.CR_DELITOS,
	   PI_CR_DETENIDOS        IN SISMPA.MPPK_REGISTRA_DENUNCIA_TURNO.CR_DETENIDOS,
	   PI_V_ID_ESPECIALIDAD   IN SISMAEST.CFTM_PLAZO_TURNO.ID_V_ESPECIALIDAD%TYPE,
	   PI_V_CO_US_CREACION    IN SISMPA.MPTV_DENUNCIA.CO_V_US_CREACION%TYPE,
	   PO_V_ID_CASO           OUT SISEFE.EFTV_CASO.ID_V_CASO%TYPE,
	   PO_V_CO_CASO           OUT SISEFE.EFTV_CASO.CO_V_CASO%TYPE,
	   PO_V_CO_ENTIDAD        OUT SISEFE.EFTV_CASO.CO_V_ENTIDAD%TYPE,
       PO_N_ID_TIPO_ENTIDAD   OUT SISEFE.EFTV_CASO.ID_N_TIPO_ENTIDAD%TYPE,
       PO_V_FE_CREACION		  OUT DATE,
       PO_V_ERR_COD           OUT VARCHAR2,
	   PO_V_ERR_MSG           OUT VARCHAR2
	) AS

	  V_V_ACCION              VARCHAR(20) := 'COMPLETAR';
	  V_N_CONTADOR            NUMBER;
	  V_V_ID_DENUNCIA         SISMPA.MPTV_DENUNCIA.ID_V_DENUNCIA%TYPE;
	  V_V_ID_CASO             SISEFE.EFTV_CASO.ID_V_CASO%TYPE;
	  V_D_FE_DETENCION        SISMPA.MPTV_SUJETO_CONDICION.FE_D_DETENCION%TYPE := NULL;
	  V_V_CO_CASO             SISEFE.EFTV_CASO.CO_V_CASO%TYPE;
      V_V_CO_DESPACHO         SISEFE.EFTV_CASO.CO_V_DESPACHO%TYPE;
	  V_V_NO_ESPECIALIDAD     VARCHAR(200);
	  V_N_ID_DISTRITO_FISCAL  NUMBER;
      V_V_ID_ESPECIALIDAD     SISMAEST.CFTM_ESPECIALIDAD.ID_V_ESPECIALIDAD%TYPE;
      V_N_ID_DPND_FISCAL      NUMBER;
      V_V_ID_FISCAL_ASIGNADO  SISEFE.EFTV_FISCAL_ASIGNADO.ID_V_FISCAL_ASIGNADO%TYPE;
      V_V_CO_ENTIDAD_FISCAL_ASIGNADO   SISMPA.MPTV_DENUNCIA.CO_V_ENTIDAD%TYPE;
      V_V_CO_DESPACHO_FISCAL_ASIGNADO  SISMPA.MPTV_DENUNCIA.CO_V_DESPACHO%TYPE;
      V_V_ID_MOVIMIENTO       SISEFE.EFTV_MOVIMIENTO.ID_V_MOVIMIENTO%TYPE;
      V_C_DIA_HABIL           SISMAEST.EFTM_PLAZOS.FL_C_DIA_HABIL%TYPE;
      V_N_ID_TIPO_UNIDAD      SISMAEST.EFTM_PLAZOS.ID_N_TIPO_UNIDAD%TYPE;
      V_N_NU_CANTIDAD_MAX     SISMAEST.EFTM_PLAZOS.NU_N_CANTIDAD_MAX%TYPE;
      V_N_ID_PLAZO            SISMAEST.EFTM_PLAZOS.ID_N_PLAZOS%TYPE;
      V_D_FE_FINAL            DATE;
      V_D_FECHA_EMISION 	  DATE;
BEGIN

SAVEPOINT REGISTRO_DENUNCIA_TURNO;

-- VALIDAR TIPO DE DENUNCIA

IF PI_N_TIPO_DENUNCIA = 363 THEN -- Denuncia de oficio

			V_V_ACCION := 'REGISTRAR';

			-- REGISTRAR DATOS GENERALES

FOR I IN 1..PI_CR_DATOS_GENERALES.COUNT LOOP

				 SISMPA.MPPK_DENUNCIA_TURNO.MPSP_INSERTAR_DATOS_GENERALES(
			    	PI_CR_DATOS_GENERALES(I).ID_N_TIPO_DOC_IDENT,
					PI_CR_DATOS_GENERALES(I).NU_V_DOCUMENTO,
					PI_CR_DATOS_GENERALES(I).NO_V_CIUDADANO,
					PI_CR_DATOS_GENERALES(I).AP_V_PATERNO,
					PI_CR_DATOS_GENERALES(I).AP_V_MATERNO,
					PI_CR_DATOS_GENERALES(I).NU_V_TELEFONO,
					PI_CR_DATOS_GENERALES(I).DE_V_CORREO,
					PI_CR_DATOS_GENERALES(I).NO_V_USUARIO,
					PI_CR_DATOS_GENERALES(I).ID_N_TIPO_SUJETO,
					PI_CR_DATOS_GENERALES(I).CO_V_DPND_FISCAL,
                    PI_CR_DATOS_GENERALES(I).CO_V_DESPACHO,
					PI_CR_DATOS_GENERALES(I).ID_V_DPND_POLICIAL,
					NULL,
					PI_N_TIPO_DENUNCIA, -- DENUNCIA DE OFICIO
                    PI_CR_DATOS_GENERALES(I).CO_V_DISTRITO_FISCAL,
					V_V_ID_DENUNCIA,
					V_V_ID_CASO,
					V_V_CO_CASO,
                    V_V_CO_DESPACHO,
					V_V_NO_ESPECIALIDAD,
                    V_N_ID_DISTRITO_FISCAL,
                    V_V_ID_ESPECIALIDAD,
                    V_N_ID_DPND_FISCAL,
                    PO_N_ID_TIPO_ENTIDAD,
                    PO_V_FE_CREACION,
			        PO_V_ERR_COD,
		            PO_V_ERR_MSG
			    );

			    IF PO_V_ERR_COD <> '0' THEN
					RAISE EX_CONTROLADO;
END IF;

END LOOP;

ELSE

			V_V_ID_DENUNCIA := PI_V_ID_DENUNCIA;
			V_V_ID_CASO     := PI_V_ID_CASO;

SELECT ID_V_CASO,
       CO_V_CASO,
       CO_V_ENTIDAD
INTO V_V_ID_CASO,
    V_V_CO_CASO,
    PO_V_CO_ENTIDAD
FROM SISEFE.EFTV_CASO
WHERE ID_V_CASO = PI_V_ID_CASO;

SELECT E.ID_N_TIPO_ENTIDAD
INTO PO_N_ID_TIPO_ENTIDAD
FROM SISMAEST.SATM_ENTIDAD E
WHERE E.CO_V_ENTIDAD = PO_V_CO_ENTIDAD;

-- VALIDAR SI LA DENUNCIA TIENE ESTADO PENDIENTE DE REGISTRO

SELECT COUNT(1)
INTO V_N_CONTADOR
FROM SISMPA.MPTV_DENUNCIA
WHERE ID_V_DENUNCIA = V_V_ID_DENUNCIA
  AND ID_N_ESTADO_REGISTRO = 365;

IF V_N_CONTADOR = 0 THEN
		        PO_V_ERR_COD := '42202045';
		        SISCFE.CFPK_MENSAJE_VALIDACION.CFSP_OBTENER_MENSAJE_VALIDACION(PO_V_ERR_COD, PO_V_ERR_MSG, V_V_COD_ERR, V_V_MSG_ERR);
				RAISE EX_CONTROLADO;
END IF;

END IF;

		-- REGISTRAMOS LOS HECHOS
		V_D_FECHA_EMISION := SYSDATE;

FOR I IN 1..PI_CR_HECHOS.COUNT LOOP

			-- REGISTRAR FISCAL ASIGNADO

			IF NVL(PI_CR_HECHOS(I).ID_V_FISCAL,' ') <> ' ' THEN

SELECT CO_V_ENTIDAD, CO_V_DESPACHO
INTO V_V_CO_ENTIDAD_FISCAL_ASIGNADO, V_V_CO_DESPACHO_FISCAL_ASIGNADO
FROM SISMPA.MPTV_DENUNCIA md
WHERE md.ID_V_DENUNCIA = V_V_ID_DENUNCIA;

-- REGISTRAR MOVIMIENTO

INSERT INTO SISEFE.EFTV_MOVIMIENTO(
    ID_V_MOVIMIENTO,
    ID_V_CASO,
    FE_D_CREACION,
    CO_V_US_CREACION,
    ES_C_MOVIMIENTO,
    ID_V_FISCAL_ASIGNADO,
    ID_N_ACCION_ESTADO
)
VALUES(
          SYS_GUID(),
          V_V_ID_CASO,
          SYSDATE,
          PI_V_CO_US_CREACION,
          '1',
          NULL,
          14 -- Asignacion
      ) RETURNING ID_V_MOVIMIENTO INTO V_V_ID_MOVIMIENTO;

-- REGISTRAR FISCAL ASIGNADO

INSERT INTO SISEFE.EFTV_FISCAL_ASIGNADO(
    ID_V_CASO,
    ID_V_USUARIO, --FISCAL
    CO_V_ENTIDAD,
    CO_V_DESPACHO,
    ID_N_TIPO_ASIGNACION,
    ID_V_MOVIMIENTO,
    FE_D_ASIGNACION,
    FE_D_CREACION,
    FE_D_MODIFICACION,
    ES_C_FISCAL_ASIGNADO
)
VALUES(
          V_V_ID_CASO,
          PI_CR_HECHOS(I).ID_V_FISCAL,
          V_V_CO_ENTIDAD_FISCAL_ASIGNADO,
          V_V_CO_DESPACHO_FISCAL_ASIGNADO,
          1,
          V_V_ID_MOVIMIENTO,
          SYSDATE,
          SYSDATE,
          SYSDATE,
          '1'
      ) RETURNING ID_V_FISCAL_ASIGNADO INTO V_V_ID_FISCAL_ASIGNADO;

UPDATE SISEFE.EFTV_MOVIMIENTO
SET ID_V_FISCAL_ASIGNADO = V_V_ID_FISCAL_ASIGNADO,
    CO_V_US_MODIFICACION = PI_V_CO_US_CREACION,
    FE_D_MODIFICACION = SYSDATE
WHERE ID_V_MOVIMIENTO = V_V_ID_MOVIMIENTO;

UPDATE SISEFE.EFTV_CASO
SET ID_V_FISCAL_ASIGNADO = V_V_ID_FISCAL_ASIGNADO,
    CO_V_US_MODIFICACION = PI_V_CO_US_CREACION,
    FE_D_MODIFICACION = SYSDATE
WHERE ID_V_CASO = V_V_ID_CASO;

-- REGISTRAR PLAZO DE 5D

SELECT FL_C_DIA_HABIL, ID_N_TIPO_UNIDAD, NU_N_CANTIDAD_MAX, ID_N_PLAZOS
INTO V_C_DIA_HABIL, V_N_ID_TIPO_UNIDAD, V_N_NU_CANTIDAD_MAX, V_N_ID_PLAZO
FROM SISMAEST.EFTM_PLAZOS
WHERE ID_N_ACCION_ESTADO = 15
  AND ES_C_PLAZOS = '1'
  AND ID_N_DISTRITO_FISCAL = 2;

SELECT SISEFE.EFFN_PLAZO_FE_FIN(V_D_FECHA_EMISION , V_C_DIA_HABIL, V_N_NU_CANTIDAD_MAX)
INTO V_D_FE_FINAL
FROM DUAL;

INSERT INTO SISEFE.EFTV_PLAZOS_CASO(
    ID_V_PLAZOS_CASO,
    ID_V_MOVIMIENTO,
    ID_V_CASO,
    ID_N_TIPO_COMPLEJIDAD,
    ID_N_TIPO_UNIDAD,
    NU_N_CANTIDAD,
    NU_N_PLAZO,
    FE_D_EMISION,
    FE_D_FINCALCULADA,
    ES_C_PLAZOS_CASO,
    FE_D_CREACION,
    FL_C_ESTADO_CASO,
    CO_V_US_CREACION,
    ID_N_PLAZOS,
    ID_V_PROCESO_ETAPA
)
VALUES(
          SYS_GUID(),
          V_V_ID_MOVIMIENTO,
          V_V_ID_CASO,
          2, -- COMPLEJIDAD SIMPLE
          V_N_ID_TIPO_UNIDAD,
          V_N_NU_CANTIDAD_MAX,
          V_N_NU_CANTIDAD_MAX,
          V_D_FECHA_EMISION,
          V_D_FE_FINAL,
          '1',
          SYSDATE,
          '1',
          PI_V_CO_US_CREACION,
          V_N_ID_PLAZO,
          '10101' -- ETAPA CALIFICACION EN SUBTIPO PROCESO COMUN
      );

UPDATE SISEFE.EFTV_CASO
SET FL_C_ASIGNADO = '1',
    FL_C_RECEPCION = '1',
    FE_D_MODIFICACION = SYSDATE,
    CO_V_US_MODIFICACION = PI_V_CO_US_CREACION,
    FE_D_INGRESO_COMPUTABLE = V_D_FECHA_EMISION
WHERE ID_V_CASO = V_V_ID_CASO
  AND ES_C_REGISTRO = '1';

ELSE -- SIN FISCAL ASIGNADO

                -- REGISTRAR MOVIMIENTO

			    INSERT INTO SISEFE.EFTV_MOVIMIENTO(
			        ID_V_MOVIMIENTO,
			        ID_V_CASO,
			        FE_D_CREACION,
			        CO_V_US_CREACION,
			        ES_C_MOVIMIENTO,
			        ID_V_FISCAL_ASIGNADO,
			        ID_N_ACCION_ESTADO
			     )
                VALUES(
                    SYS_GUID(),
                    V_V_ID_CASO,
                    SYSDATE,
                    PI_V_CO_US_CREACION,
                    '1',
                    NULL,
                    3 -- Registro de denuncia en Mesa de Turno
                 ) RETURNING ID_V_MOVIMIENTO INTO V_V_ID_MOVIMIENTO;

                 -- REGISTRAR PLAZO DE 24H

SELECT FL_C_DIA_HABIL, ID_N_TIPO_UNIDAD, NU_N_CANTIDAD_MAX, ID_N_PLAZOS
INTO V_C_DIA_HABIL, V_N_ID_TIPO_UNIDAD, V_N_NU_CANTIDAD_MAX, V_N_ID_PLAZO
FROM SISMAEST.EFTM_PLAZOS
WHERE ID_N_ACCION_ESTADO = 3
  AND ES_C_PLAZOS = '1'
  AND ID_N_DISTRITO_FISCAL = 2;

SELECT SISEFE.EFFN_PLAZO_FE_FIN(V_D_FECHA_EMISION, V_C_DIA_HABIL, V_N_NU_CANTIDAD_MAX)
INTO V_D_FE_FINAL
FROM DUAL;

INSERT INTO SISEFE.EFTV_PLAZOS_CASO(
    ID_V_PLAZOS_CASO,
    ID_V_MOVIMIENTO,
    ID_V_CASO,
    ID_N_TIPO_COMPLEJIDAD,
    ID_N_TIPO_UNIDAD,
    NU_N_CANTIDAD,
    NU_N_PLAZO,
    FE_D_EMISION,
    FE_D_FINCALCULADA,
    ES_C_PLAZOS_CASO,
    FE_D_CREACION,
    FL_C_ESTADO_CASO,
    CO_V_US_CREACION,
    ID_N_PLAZOS,
    ID_V_PROCESO_ETAPA
)
VALUES(
          SYS_GUID(),
          V_V_ID_MOVIMIENTO,
          V_V_ID_CASO,
          2, -- COMPLEJIDAD SIMPLE
          V_N_ID_TIPO_UNIDAD,
          V_N_NU_CANTIDAD_MAX,
          V_N_NU_CANTIDAD_MAX,
          V_D_FECHA_EMISION,
          V_D_FE_FINAL,
          '1',
          SYSDATE,
          '1',
          PI_V_CO_US_CREACION,
          V_N_ID_PLAZO,
          '10101' -- ETAPA CALIFICACION EN SUBTIPO DE PROCESO COMUN
      );

UPDATE SISEFE.EFTV_CASO
SET FL_C_ASIGNADO = '0',
    FL_C_RECEPCION = '0',
    FE_D_MODIFICACION = SYSDATE,
    CO_V_US_MODIFICACION = PI_V_CO_US_CREACION,
    FE_D_INGRESO_COMPUTABLE = V_D_FECHA_EMISION
WHERE ID_V_CASO = V_V_ID_CASO
  AND ES_C_REGISTRO = '1';

END IF;

			-- REGISTRAR HECHOS

			SISMPA.MPPK_REGISTRA_DENUNCIA_TURNO.MPSP_REGISTRAR_HECHOS_CASO(
			    V_V_ID_DENUNCIA,
			    V_V_ID_CASO,
				PI_CR_HECHOS(I).ID_V_UBIGEO,
				PI_CR_HECHOS(I).ID_N_TIPO_LUGAR,
				PI_CR_HECHOS(I).ID_N_TIPO_VIA,
				PI_CR_HECHOS(I).DI_V_HECHO,
				PI_CR_HECHOS(I).NU_N_DIRECCION,
				PI_CR_HECHOS(I).CD_V_LATITUD,
				PI_CR_HECHOS(I).CD_V_LONGITUD,
				PI_CR_HECHOS(I).FE_D_HECHO,
				PI_CR_HECHOS(I).ID_N_TIPO_HECHO,
				PI_CR_HECHOS(I).DE_V_NARRATIVA,
				PI_CR_HECHOS(I).FE_D_DETENCION,
				PI_CR_HECHOS(I).NU_N_FALLECIDOS,
				PI_CR_HECHOS(I).ID_N_TIPO_ENCARGADO,
                PI_V_CO_US_CREACION,
				PO_V_ERR_COD,
				PO_V_ERR_MSG
			);

		    V_D_FE_DETENCION := PI_CR_HECHOS(I).FE_D_DETENCION;

			IF PO_V_ERR_COD <> '0' THEN
				RAISE EX_CONTROLADO;
END IF;

END LOOP;

		-- REGISTRAMOS LOS PARTICIPANTES

	    SISMPA.MPPK_REGISTRA_DENUNCIA_TURNO.MPSP_REGISTRAR_PARTES_INVOLUCRADAS(
	         V_V_ID_DENUNCIA,
	         V_V_ID_CASO,
	         V_D_FE_DETENCION,
	         PI_CR_PARTES,
	         PI_V_ID_ESPECIALIDAD,
	         PI_V_CO_US_CREACION,
	         PO_V_ERR_COD,
		     PO_V_ERR_MSG
	    );

	    IF PO_V_ERR_COD <> '0' THEN
		     RAISE EX_CONTROLADO;
END IF;

		-- REGISTRAMOS LOS DELITOS

	    SISMPA.MPPK_DELITOS_TURNO.MPSP_REGISTRAR_DELITOS(
	        V_V_ID_DENUNCIA,
		    V_V_ID_CASO,
	    	PI_CR_DELITOS,
	    	PI_CR_DETENIDOS,
	    	PI_V_CO_US_CREACION,
	        PO_V_ERR_COD,
	        PO_V_ERR_MSG
        );

        IF PO_V_ERR_COD <> '0' THEN
		     RAISE EX_CONTROLADO;
END IF;

	    -- ACTUALIZAMOS EL ESTADO A COMPLETADO DE LA DENUNCIA

UPDATE SISMPA.MPTV_DENUNCIA
SET ID_N_ESTADO_REGISTRO = 364, -- COMPLETO
    FE_D_INGRESO_COMPUTABLE = V_D_FECHA_EMISION,
    CO_V_US_MODIFICACION = PI_V_CO_US_CREACION,
    FE_D_MODIFICACION = SYSDATE
WHERE ID_V_DENUNCIA = V_V_ID_DENUNCIA;

PO_V_FE_CREACION :=  V_D_FECHA_EMISION;
	    PO_V_ID_CASO := V_V_ID_CASO;
	    PO_V_CO_CASO := V_V_CO_CASO;
	    PO_V_ERR_COD := V_V_COD_OK;
		PO_V_ERR_MSG := V_V_MSG_OK;

EXCEPTION
		WHEN EX_CONTROLADO THEN
			ROLLBACK TO REGISTRO_DENUNCIA_TURNO;
			SISCFE.CFPK_MENSAJE_VALIDACION.CFSP_OBTENER_MENSAJE_VALIDACION(PO_V_ERR_COD, PO_V_ERR_MSG, V_V_COD_ERR, V_V_MSG_ERR);
WHEN OTHERS THEN
	        PO_V_ERR_COD := '1';
	        PO_V_ERR_MSG := 'ERROR AL INTENTAR ' || V_V_ACCION || ' LOS DATOS DE LA DENUNCIA: ' || SQLCODE || ' - ' || SQLERRM || '-' || 'Objeto: ' || dbms_utility.format_error_backtrace() || '--' || dbms_utility.format_error_stack();
ROLLBACK TO REGISTRO_DENUNCIA_TURNO;
END MPSP_REGISTRAR_DENUNCIA_TURNO;

	/********************************************************************************
    * Nombre        : SISMPA.MPPK_REGISTRA_DENUNCIA_TURNO.MPSP_REGISTRAR_HECHOS_CASO
    * Autor         : Adolfo Villanueva Paravicino
    * Versión       : 1.0
    * Descripción   : Registrar los hechos
    * Fecha creación: 28.11.2023
    **********************************************************************************/

    PROCEDURE MPSP_REGISTRAR_HECHOS_CASO(
        PI_V_ID_DENUNCIA       IN SISMPA.MPTV_DENUNCIA.ID_V_DENUNCIA%TYPE,
	    PI_V_ID_CASO           IN SISEFE.EFTV_CASO.ID_V_CASO%TYPE,
    	PI_ID_V_UBIGEO         IN SISMAEST.CFTM_DIST_GEOGRAFICA.CO_V_UBIGEO_RENIEC%TYPE,
        PI_ID_N_TIPO_LUGAR     IN SISMPA.MPTV_HECHO.ID_N_TIPO_LUGAR%TYPE,
        PI_ID_N_TIPO_VIA       IN SISMPA.MPTV_HECHO.ID_N_TIPO_VIA%TYPE,
        PI_DI_V_HECHO          IN SISMPA.MPTV_HECHO.DI_V_HECHO%TYPE,
        PI_NU_N_DIRECCION      IN SISMPA.MPTV_HECHO.NU_N_DIRECCION%TYPE,
        PI_CD_V_LATITUD        IN SISMPA.MPTV_HECHO.CD_V_LATITUD%TYPE,
        PI_CD_V_LONGITUD       IN SISMPA.MPTV_HECHO.CD_V_LONGITUD%TYPE,
        PI_FE_D_HECHO          IN SISMPA.MPTV_HECHO.FE_D_HECHO%TYPE,
        PI_ID_N_TIPO_HECHO     IN SISMPA.MPTV_HECHO.ID_N_TIPO_HECHO%TYPE,
        PI_DE_V_NARRATIVA      IN SISMPA.MPTV_HECHO.DE_V_NARRATIVA%TYPE,
        PI_FE_D_DETENCION      IN SISMPA.MPTV_HECHO.FE_D_DETENCION%TYPE,
        PI_NU_N_FALLECIDOS     IN SISMPA.MPTV_HECHO.NU_N_FALLECIDOS%TYPE,
        PI_ID_N_TIPO_ENCARGADO IN SISMPA.MPTV_HECHO.ID_N_TIPO_ENCARGADO%TYPE,
        PI_V_CO_US_CREACION    IN SISMPA.MPTV_DENUNCIA.CO_V_US_CREACION%TYPE,
        PO_V_ERR_COD           OUT VARCHAR2,
        PO_V_ERR_MSG           OUT VARCHAR2
    ) IS

        V_V_ID_HECHO      SISMPA.MPTV_HECHO.ID_V_HECHO%TYPE;
        V_D_FE_CREACION   SISMPA.MPTV_HECHO.FE_D_CREACION%TYPE;
        V_N_ID_UBIGEO     SISMPA.MPTV_HECHO.ID_N_UBIGEO%TYPE;
        EX_CONTROLADO     EXCEPTION;

BEGIN

SELECT ID_N_UBIGEO
INTO V_N_ID_UBIGEO
FROM SISMAEST.CFTM_DIST_GEOGRAFICA
WHERE CO_V_UBIGEO_RENIEC = PI_ID_V_UBIGEO;

V_D_FE_CREACION := SYSDATE;

INSERT INTO SISMPA.MPTV_HECHO(
    ID_V_HECHO,
    ID_V_DENUNCIA,
    ID_V_CASO,
    ID_N_UBIGEO,
    ID_N_TIPO_LUGAR,
    ID_N_TIPO_VIA,
    DI_V_HECHO,
    NU_N_DIRECCION,
    CD_V_LATITUD,
    CD_V_LONGITUD,
    FE_D_HECHO,
    ID_N_TIPO_HECHO,
    DE_V_NARRATIVA,
    FE_D_DETENCION,
    NU_N_FALLECIDOS,
    ID_N_TIPO_ENCARGADO,
    ES_C_HECHO,
    FE_D_CREACION,
    CO_V_US_CREACION,
    FL_C_ORIGEN
)
VALUES (
           SYS_GUID(),
           PI_V_ID_DENUNCIA,
           PI_V_ID_CASO,
           V_N_ID_UBIGEO,
           PI_ID_N_TIPO_LUGAR,
           PI_ID_N_TIPO_VIA,
           PI_DI_V_HECHO,
           PI_NU_N_DIRECCION,
           PI_CD_V_LATITUD,
           PI_CD_V_LONGITUD,
           PI_FE_D_HECHO,
           PI_ID_N_TIPO_HECHO,
           PI_DE_V_NARRATIVA,
           PI_FE_D_DETENCION,
           PI_NU_N_FALLECIDOS,
           PI_ID_N_TIPO_ENCARGADO,
           '1',
           V_D_FE_CREACION,
           PI_V_CO_US_CREACION,
           'D'
       ) RETURNING ID_V_HECHO INTO V_V_ID_HECHO;

INSERT INTO SISMPA.MPTH_HECHO_HISTORIAL(
    ID_V_HECHO_HISTORIAL,
    ID_V_HECHO,
    ID_V_DENUNCIA,
    ID_V_CASO,
    ID_N_TIPO_ENCARGADO,
    ID_N_TIPO_LUGAR,
    ID_N_TIPO_HECHO,
    ID_N_TIPO_VIA,
    DE_V_NARRATIVA,
    DI_V_HECHO,
    NU_N_DIRECCION,
    CD_V_LATITUD,
    CD_V_LONGITUD,
    FE_D_HECHO,
    ES_C_HECHO,
    FE_D_CREACION,
    NU_N_FALLECIDOS,
    FL_C_ORIGEN,
    CO_V_US_CREACION,
    FE_D_DETENCION,
    ID_N_UBIGEO
) VALUES(
            SYS_GUID(),
            V_V_ID_HECHO,
            PI_V_ID_DENUNCIA,
            PI_V_ID_CASO,
            PI_ID_N_TIPO_ENCARGADO,
            PI_ID_N_TIPO_LUGAR,
            PI_ID_N_TIPO_HECHO,
            PI_ID_N_TIPO_VIA,
            PI_DE_V_NARRATIVA,
            PI_DI_V_HECHO,
            PI_NU_N_DIRECCION,
            PI_CD_V_LATITUD,
            PI_CD_V_LONGITUD,
            PI_FE_D_HECHO,
            '1',
            V_D_FE_CREACION,
            PI_NU_N_FALLECIDOS,
            'D',
            PI_V_CO_US_CREACION,
            PI_FE_D_DETENCION,
            V_N_ID_UBIGEO
        );

PO_V_ERR_COD := V_V_COD_OK;
        PO_V_ERR_MSG := V_V_MSG_OK;

EXCEPTION
        WHEN
            OTHERS THEN
            PO_V_ERR_COD := '1';
            PO_V_ERR_MSG := 'REGISTRAR_HECHOS_CASO - ERROR : ' || SQLERRM;

END MPSP_REGISTRAR_HECHOS_CASO;

    /****************************************************************************************
    * Nombre        : SISMPA.MPPK_REGISTRA_DENUNCIA_TURNO.MPSP_REGISTRAR_PARTES_INVOLUCRADAS
    * Autor         : Pedro Yarleque Linares
    * Versión       : 1.0
    * Descripción   : Registrar las partes involucradas
    * Fecha creación: 08.01.2024
    *****************************************************************************************/

    PROCEDURE MPSP_REGISTRAR_PARTES_INVOLUCRADAS(
        PI_V_ID_DENUNCIA     IN SISMPA.MPTV_DENUNCIA.ID_V_DENUNCIA%TYPE,
	    PI_V_ID_CASO         IN SISEFE.EFTV_CASO.ID_V_CASO%TYPE,
	    PI_D_FE_DETENCION    IN SISMPA.MPTV_SUJETO_CONDICION.FE_D_DETENCION%TYPE,
    	PI_CR_PARTES         IN SISMPA.MPPK_REGISTRA_DENUNCIA_TURNO.CR_PARTES,
    	PI_V_ID_ESPECIALIDAD IN SISMAEST.CFTM_PLAZO_TURNO.ID_V_ESPECIALIDAD%TYPE,
    	PI_V_CO_US_CREACION  IN SISMPA.MPTV_DENUNCIA.CO_V_US_CREACION%TYPE,
        PO_V_ERR_COD         OUT VARCHAR2,
        PO_V_ERR_MSG         OUT VARCHAR2
    ) IS

      V_N_CONTADOR                  NUMBER;
	  V_V_ID_PERSONA                SISCFE.CFTV_PERSONA.ID_V_PERSONA%TYPE;
	  V_V_ID_PERSONA_RLEGAL         SISCFE.CFTV_PERSONA_NATURAL.ID_V_PERSONA%TYPE;
	  V_V_ID_SUJETO_CASO            SISCFE.CFTV_SUJETO_CASO.ID_V_SUJETO_CASO%TYPE;
	  V_V_ID_PERSONA_NATURAL        SISCFE.CFTV_PERSONA_NATURAL.ID_V_PERSONA_NATURAL%TYPE;
	  V_D_FE_DETENCION              SISMPA.MPTV_SUJETO_CONDICION.FE_D_DETENCION%TYPE := NULL;
      V_D_FE_MAXIMA_DETENCION       SISMPA.MPTV_SUJETO_CONDICION.FE_D_MAXIMA_DETENCION%TYPE := NULL;

      V_N_NU_PLAZO                  SISMAEST.CFTM_PLAZO_TURNO.NU_N_PLAZO%TYPE;
      V_N_ID_TIPO_UNIDAD            SISMAEST.CFTM_PLAZO_TURNO.ID_N_TIPO_UNIDAD%TYPE;
      V_N_ID_UBIGEO                 SISMAEST.CFTM_DIST_GEOGRAFICA.ID_N_UBIGEO%TYPE;

BEGIN

FOR I IN 1..PI_CR_PARTES.COUNT LOOP

	        IF PI_CR_PARTES(I).FL_C_AGRAVIADO IS NULL THEN

					-- VALIDAMOS SI LA PERSONA HA SIDO REGISTRADA

SELECT COUNT(1)
INTO V_N_CONTADOR
FROM SISCFE.CFTV_PERSONA cp
WHERE cp.ID_N_TIPO_DOC_IDENT = PI_CR_PARTES(I).ID_N_TIPO_DOC_IDENT
  AND cp.NU_V_DOCUMENTO = PI_CR_PARTES(I).NU_V_DOCUMENTO
  AND cp.ES_C_PERSONA = '1';

IF V_N_CONTADOR > 0 THEN

					   -- LA PERSONA YA HA SIDO REGISTRADA

SELECT cp.ID_V_PERSONA
INTO V_V_ID_PERSONA
FROM SISCFE.CFTV_PERSONA cp
WHERE cp.ID_N_TIPO_DOC_IDENT = PI_CR_PARTES(I).ID_N_TIPO_DOC_IDENT
  AND cp.NU_V_DOCUMENTO = PI_CR_PARTES(I).NU_V_DOCUMENTO
  AND cp.ES_C_PERSONA = '1';

ELSE
					    -- REGISTRA NUEVA PERSONA

						INSERT INTO SISCFE.CFTV_PERSONA(
						    ID_V_PERSONA,
						    ID_N_TIPO_DOC_IDENT,
						    NU_V_DOCUMENTO,
						    ES_C_PERSONA,
						    FE_D_CREACION,
						    CO_V_US_CREACION
						)
		                VALUES(
		                    SYS_GUID(),
		                    PI_CR_PARTES(I).ID_N_TIPO_DOC_IDENT,
		                    PI_CR_PARTES(I).NU_V_DOCUMENTO,
		                    '1',
		                    SYSDATE,
		                    PI_V_CO_US_CREACION
		                ) RETURNING ID_V_PERSONA INTO V_V_ID_PERSONA;

END IF;

					-- VALIDAMOS SI YA SE HA REGISTRADO LA PERSONA NATURAL O JURIDICA

					IF PI_CR_PARTES(I).ID_N_TIPO_DOC_IDENT <> 2 THEN

					   -- VALIDAMOS LA PERSONA NATURAL

SELECT COUNT(1)
INTO V_N_CONTADOR
FROM SISCFE.CFTV_PERSONA_NATURAL cpn
WHERE cpn.ID_V_PERSONA = V_V_ID_PERSONA
  AND cpn.ES_C_PERSONA_NATURAL = '1';

IF V_N_CONTADOR > 0 THEN

SELECT cpn.ID_V_PERSONA_NATURAL
INTO V_V_ID_PERSONA_NATURAL
FROM SISCFE.CFTV_PERSONA_NATURAL cpn
WHERE cpn.ID_V_PERSONA = V_V_ID_PERSONA
  AND cpn.ES_C_PERSONA_NATURAL = '1';

-- ACTUALIZAR DATOS DE PERSONA NATURAL

UPDATE SISCFE.CFTV_PERSONA_NATURAL
SET
    AP_V_PATERNO = PI_CR_PARTES(I).AP_V_PATERNO,
    AP_V_MATERNO = PI_CR_PARTES(I).AP_V_MATERNO,
    NO_V_CIUDADANO = PI_CR_PARTES(I).NO_V_CIUDADANO,
    FE_D_NACIMIENTO = PI_CR_PARTES(I).FE_D_NACIMIENTO,
    NU_N_EDAD = PI_CR_PARTES(I).NU_N_EDAD,
    ID_N_EST_CIV = PI_CR_PARTES(I).ID_N_EST_CIV,
    ID_N_GRAD_INST = PI_CR_PARTES(I).ID_N_GRAD_INST,
    --ID_N_TIPO_ACT_LABORAL = PI_CR_PARTES(I).ID_N_TIPO_ACT_LABORAL,
    TI_C_SEXO = PI_CR_PARTES(I).TI_C_SEXO,
    ID_N_TIPO_LENGUA = PI_CR_PARTES(I).ID_N_TIPO_LENGUA,
    ID_N_NACIONALIDAD = PI_CR_PARTES(I).ID_N_NACIONALIDAD,
    ID_N_TIPO_DISCAPACIDAD = PI_CR_PARTES(I).ID_N_TIPO_DISCAPACIDAD,
    ID_N_TIPO_ORIENTACION = PI_CR_PARTES(I).ID_N_TIPO_ORIENTACION,
    ID_N_TIPO_PUEBLO = PI_CR_PARTES(I).ID_N_TIPO_PUEBLO,
    FL_C_TRADUCTOR = PI_CR_PARTES(I).FL_C_TRADUCTOR,
    FL_C_FALLECIDO = PI_CR_PARTES(I).FL_C_FALLECIDO,
    FL_C_AFROPERUANO = PI_CR_PARTES(I).FL_C_AFROPERUANO,
    FL_C_TRAB_HOGAR = PI_CR_PARTES(I).FL_C_TRAB_HOGAR,
    FL_C_VICTIM_VIOLE_8020 = PI_CR_PARTES(I).FL_C_VICTIM_VIOLE_8020,
    FL_C_DISCAPACIDAD = PI_CR_PARTES(I).FL_C_DISCAPACIDAD,
    FL_C_PRIV_LIBERTAD = PI_CR_PARTES(I).FL_C_PRIV_LIBERTAD,
    FL_C_VIH_TBC = PI_CR_PARTES(I).FL_C_VIH_TBC,
    FL_C_MIGRANTE = PI_CR_PARTES(I).FL_C_MIGRANTE,
    FL_C_LGTBI = PI_CR_PARTES(I).FL_C_LGTBI,
    CO_V_US_MODIFICACION = PI_V_CO_US_CREACION,
    FE_D_MODIFICACION = SYSDATE,
    FL_C_EXTRANJERO = PI_CR_PARTES(I).FL_C_EXTRANJERO,
    FL_C_VERIFICADO = PI_CR_PARTES(I).FL_C_VERIFICADO,
    ID_N_PAIS = PI_CR_PARTES(I).ID_N_PAIS,
    NO_V_MADRE = PI_CR_PARTES(I).NO_V_MADRE,
    AP_V_MADRE_PATERNO = PI_CR_PARTES(I).AP_V_MADRE_PATERNO,
    AP_v_MADRE_MATERNO = PI_CR_PARTES(I).AP_v_MADRE_MATERNO,
    NO_V_PADRE = PI_CR_PARTES(I).NO_V_PADRE,
    AP_V_PADRE_PATERNO = PI_CR_PARTES(I).AP_V_PADRE_PATERNO,
    AP_V_PADRE_MATERNO = PI_CR_PARTES(I).AP_V_PADRE_MATERNO
WHERE ID_V_PERSONA_NATURAL = V_V_ID_PERSONA_NATURAL;

ELSE

					     -- REGISTRAR NUEVA PERSONA NATURAL

					     INSERT INTO SISCFE.CFTV_PERSONA_NATURAL(
					     	ID_V_PERSONA_NATURAL,
							ID_V_PERSONA,
							AP_V_PATERNO,
							AP_V_MATERNO,
							NO_V_CIUDADANO,
							FE_D_NACIMIENTO,
							NU_N_EDAD,
							ID_N_EST_CIV,
							ID_N_GRAD_INST,
							--ID_N_TIPO_ACT_LABORAL,
							TI_C_SEXO,
							ID_N_TIPO_LENGUA,
							ID_N_NACIONALIDAD,
							ID_N_TIPO_DISCAPACIDAD,
							ID_N_TIPO_ORIENTACION,
							ID_N_TIPO_PUEBLO,
							FL_C_TRADUCTOR,
							FL_C_FALLECIDO,
							FL_C_AFROPERUANO,
							FL_C_TRAB_HOGAR,
							FL_C_VICTIM_VIOLE_8020,
							FL_C_DISCAPACIDAD,
							FL_C_PRIV_LIBERTAD,
							FL_C_VIH_TBC,
							FL_C_MIGRANTE,
							FL_C_LGTBI,
							CO_V_US_CREACION,
							FE_D_CREACION,
							FL_C_EXTRANJERO,
							FL_C_VERIFICADO,
							ES_C_PERSONA_NATURAL,
							ID_N_PAIS,
							NO_V_MADRE,
							AP_V_MADRE_PATERNO,
							AP_v_MADRE_MATERNO,
							NO_V_PADRE,
							AP_V_PADRE_PATERNO,
							AP_V_PADRE_MATERNO
					     )
					     VALUES(
					     	SYS_GUID(),
							V_V_ID_PERSONA,
							PI_CR_PARTES(I).AP_V_PATERNO,
							PI_CR_PARTES(I).AP_V_MATERNO,
							PI_CR_PARTES(I).NO_V_CIUDADANO,
							PI_CR_PARTES(I).FE_D_NACIMIENTO,
							PI_CR_PARTES(I).NU_N_EDAD,
							PI_CR_PARTES(I).ID_N_EST_CIV,
							PI_CR_PARTES(I).ID_N_GRAD_INST,
							--PI_CR_PARTES(I).ID_N_TIPO_ACT_LABORAL,
							PI_CR_PARTES(I).TI_C_SEXO,
							PI_CR_PARTES(I).ID_N_TIPO_LENGUA,
							PI_CR_PARTES(I).ID_N_NACIONALIDAD,
							PI_CR_PARTES(I).ID_N_TIPO_DISCAPACIDAD,
							PI_CR_PARTES(I).ID_N_TIPO_ORIENTACION,
							PI_CR_PARTES(I).ID_N_TIPO_PUEBLO,
							PI_CR_PARTES(I).FL_C_TRADUCTOR,
							PI_CR_PARTES(I).FL_C_FALLECIDO,
							PI_CR_PARTES(I).FL_C_AFROPERUANO,
							PI_CR_PARTES(I).FL_C_TRAB_HOGAR,
							PI_CR_PARTES(I).FL_C_VICTIM_VIOLE_8020,
							PI_CR_PARTES(I).FL_C_DISCAPACIDAD,
							PI_CR_PARTES(I).FL_C_PRIV_LIBERTAD,
							PI_CR_PARTES(I).FL_C_VIH_TBC,
							PI_CR_PARTES(I).FL_C_MIGRANTE,
							PI_CR_PARTES(I).FL_C_LGTBI,
							PI_V_CO_US_CREACION,
							SYSDATE,
							PI_CR_PARTES(I).FL_C_EXTRANJERO,
							PI_CR_PARTES(I).FL_C_VERIFICADO,
							'1',
							PI_CR_PARTES(I).ID_N_PAIS,
							PI_CR_PARTES(I).NO_V_MADRE,
							PI_CR_PARTES(I).AP_V_MADRE_PATERNO,
							PI_CR_PARTES(I).AP_v_MADRE_MATERNO,
							PI_CR_PARTES(I).NO_V_PADRE,
							PI_CR_PARTES(I).AP_V_PADRE_PATERNO,
							PI_CR_PARTES(I).AP_V_PADRE_MATERNO
					     ) RETURNING ID_V_PERSONA_NATURAL INTO V_V_ID_PERSONA_NATURAL;

END IF;

ELSE

					   -- VALIDAMOS LA PERSONA JURIDICA

SELECT COUNT(1)
INTO V_N_CONTADOR
FROM SISCFE.CFTV_PERSONA_JURIDICA cpj
WHERE cpj.ID_V_PERSONA = V_V_ID_PERSONA
  AND cpj.ES_C_PERSONA_JURIDICA = '1';

IF V_N_CONTADOR > 0 THEN

					      -- PERSONA JURIDICA YA EXISTE, ACTUALIZAMOS LA INFORMACION

SELECT COUNT(1)
INTO V_N_CONTADOR
FROM SISCFE.CFTV_PERSONA_NATURAL cpn
WHERE cpn.ID_V_PERSONA = V_V_ID_PERSONA
  AND cpn.ES_C_PERSONA_NATURAL = '1';

ELSE

					      -- VALIDAR SI REPRESENTANTE LEGAL YA HA SIDO REGISTRADO

SELECT COUNT(1)
INTO V_N_CONTADOR
FROM SISCFE.CFTV_PERSONA cp
WHERE cp.ID_N_TIPO_DOC_IDENT = PI_CR_PARTES(I).ID_N_TIPO_DOC_REP_LEGAL
  AND cp.NU_V_DOCUMENTO = PI_CR_PARTES(I).NU_V_DOCUMENTO_REP_LEGAL
  AND cp.ES_C_PERSONA = '1';

IF V_N_CONTADOR > 0 THEN

					          -- OBTENER ID DE REPRESENTANTE LEGAL

SELECT cp.ID_V_PERSONA
INTO V_V_ID_PERSONA_RLEGAL
FROM SISCFE.CFTV_PERSONA cp
WHERE cp.ID_N_TIPO_DOC_IDENT = PI_CR_PARTES(I).ID_N_TIPO_DOC_REP_LEGAL
  AND cp.NU_V_DOCUMENTO = PI_CR_PARTES(I).NU_V_DOCUMENTO_REP_LEGAL
  AND cp.ES_C_PERSONA = '1';

ELSE

					          -- REGISTRAR PERSONA JURIDICA

					          INSERT INTO SISCFE.CFTV_PERSONA(
					               ID_V_PERSONA,
					               ID_N_TIPO_DOC_IDENT,
					               NU_V_DOCUMENTO,
					               ES_C_PERSONA,
					               FE_D_CREACION,
					               CO_V_US_CREACION
					          )
		                      VALUES(
		                           SYS_GUID(),
		                           PI_CR_PARTES(I).ID_N_TIPO_DOC_REP_LEGAL,
		                           PI_CR_PARTES(I).NU_V_DOCUMENTO_REP_LEGAL,
		                           '1',
		                           SYSDATE,
		                           PI_V_CO_US_CREACION
		                      ) RETURNING ID_V_PERSONA INTO V_V_ID_PERSONA_RLEGAL;


INSERT INTO SISCFE.CFTV_PERSONA_NATURAL(
    ID_V_PERSONA_NATURAL,
    ID_V_PERSONA,
    AP_V_PATERNO,
    AP_V_MATERNO,
    NO_V_CIUDADANO,
    CO_V_US_CREACION,
    FE_D_CREACION,
    FL_C_VERIFICADO,
    ES_C_PERSONA_NATURAL
)
VALUES(
          SYS_GUID(),
          V_V_ID_PERSONA_RLEGAL,
          PI_CR_PARTES(I).AP_V_PARTERNO_REP_LEGAL,
          PI_CR_PARTES(I).AP_V_MATERNO_REP_LEGAL,
          PI_CR_PARTES(I).NO_V_REP_LEGAL,
          PI_V_CO_US_CREACION,
          SYSDATE,
          '0',
          '1'
      );

END IF;

					   	  -- REGISTRAR NUEVA PERSONA JURIDICA

INSERT INTO SISCFE.CFTV_PERSONA_JURIDICA(
    ID_V_PERSONA_JURIDICA,
    ID_V_PERSONA,
    DE_V_RAZON_SOCIAL,
    DE_V_ACTIV_EMPRESARIAL,
    CO_V_US_CREACION,
    FE_D_CREACION,
    ID_V_PERSONA_RLEGAL,
    ES_C_PERSONA_JURIDICA,
    FL_C_VERIFICADO,
    NO_V_RLEGAL
)
VALUES(
          SYS_GUID(),
          V_V_ID_PERSONA,
          PI_CR_PARTES(I).DE_V_RAZON_SOCIAL,
          PI_CR_PARTES(I).DE_V_ACTIV_EMPRESARIAL,
          PI_V_CO_US_CREACION,
          SYSDATE,
          V_V_ID_PERSONA_RLEGAL,
          '1',
          PI_CR_PARTES(I).FL_C_VERIFICADO,
          TRIM(UPPER(PI_CR_PARTES(I).NO_V_REP_LEGAL || ' ' || PI_CR_PARTES(I).AP_V_PARTERNO_REP_LEGAL || ' ' || NVL(PI_CR_PARTES(I).AP_V_MATERNO_REP_LEGAL, '')))
      );

END IF;

END IF;

ELSE
			  V_V_ID_PERSONA := NULL;
END IF;

			-- REGISTRAMOS EL SUJETO CASO

INSERT INTO SISCFE.CFTV_SUJETO_CASO(
    ID_V_SUJETO_CASO,
    ID_V_PERSONA,
    ID_V_CASO,
    ID_V_DENUNCIA,
    ID_N_TIPO_PARTE_SUJETO,
    FL_C_DESCONOCIDO,
    ES_C_SUJETO_CASO,
    CO_V_US_CREACION,
    FE_D_CREACION,
    FL_C_AGRAVIADO,
    FL_C_ORIGEN
)
VALUES(
          SYS_GUID(),
          V_V_ID_PERSONA,
          PI_V_ID_CASO,
          PI_V_ID_DENUNCIA,
          PI_CR_PARTES(I).ID_N_TIPO_PARTE_SUJETO,
          PI_CR_PARTES(I).FL_C_DESCONOCIDO,
          '1',
          PI_V_CO_US_CREACION,
          SYSDATE,
          PI_CR_PARTES(I).FL_C_AGRAVIADO,
          'D'
      ) RETURNING ID_V_SUJETO_CASO INTO V_V_ID_SUJETO_CASO;

-- REGISTRAMOS DENUNCIA DETALLE PARA LOS IMPUTADOS

IF PI_CR_PARTES(I).ID_N_TIPO_PARTE_SUJETO = 4 THEN

	            INSERT INTO SISMPA.MPTV_DENUNCIA_DETALLE(
	                 ID_V_DENUNCIA_DETALLE,
	                 ID_V_DENUNCIA,
	                 ES_C_DENUNCIA_DETALLE,
	                 CO_V_US_CREACION,
	                 FE_D_CREACION,
	                 ID_V_SUJETO_CASO
	            )
	            VALUES(
	            	 SYS_GUID(),
	            	 PI_V_ID_DENUNCIA,
	            	 '1',
	            	 PI_V_CO_US_CREACION,
	            	 SYSDATE,
	            	 V_V_ID_SUJETO_CASO
	            );

END IF;

            -- REGISTRAMOS EL PROCESO

            IF PI_CR_PARTES(I).ID_N_TIPO_DOC_IDENT <> 2 THEN

			   -- VALIDAMOS LA PERSONA NATURAL

               INSERT INTO SISCFE.CFTV_SUJETO_CASO_DETALLE(
				   ID_V_SUJETO_CASO_DETALLE,
				   ID_V_SUJETO_CASO,
				   FL_C_EXTRANJERO,
				   FL_C_FUNC_PUBLICO,
				   FE_D_FECHAREG,
				   FE_D_CREACION,
				   FL_C_DEFENSOR,
				   FL_C_ES_MENOR_DE_EDAD,
				   FL_C_PROCURADOR,
				   CO_V_US_CREACION,
				   ES_C_SUJETO_CASO_DETALLE,

				   NO_V_CIUDADANO,
				   AP_V_PATERNO,
				   AP_V_MATERNO,
				   FE_D_NACIMIENTO,
				   TI_C_SEXO,
				   ID_N_EST_CIV,
				   ID_N_GRAD_INST,
				   ID_N_NACIONALIDAD,
				   ID_V_REGISTROS_BIOMETRICOS,
				   NO_V_MADRE,
				   AP_V_MADRE_PATERNO,
				   AP_v_MADRE_MATERNO,
				   NO_V_PADRE,
				   AP_V_PADRE_PATERNO,
				   AP_V_PADRE_MATERNO,
				   ID_N_TIPO_ACT_LABORAL,
                   NO_V_OTRA_ACT_LABORAL,
                   FL_C_VERIFICADO,
                   ID_N_TIPO_COND_SUJETO,
                   ID_N_CARGO_FUNCIONARIO,
                   ID_N_INSTITUCION,
                   ID_N_TIPO_DEFENSOR,
                   FL_C_ASOC_DEFENSORA,
                   ID_N_CARGO_ASOCIACION,
                   FE_D_VALORIZACION,
                   FE_D_DETENCION,
                   ID_N_TIPO_VIOLENCIA,
                   ID_N_TIPO_RIESGO,
                   ID_N_TIPO_DISCAPACIDAD,
                   DE_V_OBSERVACIONES
			   )
               VALUES(
                   SYS_GUID(),
                   V_V_ID_SUJETO_CASO,
                   PI_CR_PARTES(I).FL_C_EXTRANJERO,
                   PI_CR_PARTES(I).FL_C_FUNC_PUBLICO,
                   SYSDATE,
                   SYSDATE,
                   PI_CR_PARTES(I).FL_C_DEFENSOR,
                   PI_CR_PARTES(I).FL_C_ES_MENOR_DE_EDAD,
                   PI_CR_PARTES(I).FL_C_PROCURADOR,
                   PI_V_CO_US_CREACION,
                   '1',
                   PI_CR_PARTES(I).NO_V_CIUDADANO,
                   PI_CR_PARTES(I).AP_V_PATERNO,
                   PI_CR_PARTES(I).AP_V_MATERNO,
                   PI_CR_PARTES(I).FE_D_NACIMIENTO,
                   PI_CR_PARTES(I).TI_C_SEXO,
                   PI_CR_PARTES(I).ID_N_EST_CIV,
                   PI_CR_PARTES(I).ID_N_GRAD_INST,
                   PI_CR_PARTES(I).ID_N_NACIONALIDAD,
                   NULL, -- REGISTROS BIOMETRICOS
                   PI_CR_PARTES(I).NO_V_MADRE,
                   PI_CR_PARTES(I).AP_V_MADRE_PATERNO,
                   PI_CR_PARTES(I).AP_v_MADRE_MATERNO,
                   PI_CR_PARTES(I).NO_V_PADRE,
                   PI_CR_PARTES(I).AP_V_PADRE_PATERNO,
                   PI_CR_PARTES(I).AP_V_PADRE_MATERNO,
                   PI_CR_PARTES(I).ID_N_TIPO_ACT_LABORAL,
                   PI_CR_PARTES(I).NO_V_OTRA_ACT_LABORAL,
                   PI_CR_PARTES(I).FL_C_VERIFICADO,
                   PI_CR_PARTES(I).ID_N_TIPO_COND_SUJETO,
                   PI_CR_PARTES(I).ID_N_CARGO_FUNCIONARIO,
                   PI_CR_PARTES(I).ID_N_INSTITUCION,
                   PI_CR_PARTES(I).ID_N_TIPO_DEFENSOR,
                   PI_CR_PARTES(I).FL_C_ASOC_DEFENSORA,
                   PI_CR_PARTES(I).ID_N_CARGO_ASOCIACION,
                   TO_DATE(PI_CR_PARTES(I).FE_D_VALORIZACION, 'YYYY-MM-DD'),
                   TO_DATE(PI_CR_PARTES(I).FE_D_DETENCION, 'YYYY-MM-DD'),
                   PI_CR_PARTES(I).ID_N_TIPO_VIOLENCIA,
                   PI_CR_PARTES(I).ID_N_TIPO_RIESGO,
                   PI_CR_PARTES(I).ID_N_TIPO_DISCAPACIDAD,
                   PI_CR_PARTES(I).DE_V_OBSERVACIONES
               );

ELSE

			   -- VALIDAMOS LA PERSONA JURIDICA

               INSERT INTO SISCFE.CFTV_SUJETO_CASO_DETALLE(
				   ID_V_SUJETO_CASO_DETALLE,
				   ID_V_SUJETO_CASO,
				   NO_V_TUTOR,
				   FE_D_FECHAREG,
				   FE_D_CREACION,
				   CO_V_US_CREACION,
				   ES_C_SUJETO_CASO_DETALLE,
                   FL_C_VERIFICADO
			   )
			   VALUES (
			   	   SYS_GUID(),
                   V_V_ID_SUJETO_CASO,
                   TRIM(UPPER(PI_CR_PARTES(I).NO_V_REP_LEGAL || ' ' || PI_CR_PARTES(I).AP_V_PARTERNO_REP_LEGAL || ' ' || NVL(PI_CR_PARTES(I).AP_V_MATERNO_REP_LEGAL, ''))),
                   SYSDATE,
                   SYSDATE,
                   PI_V_CO_US_CREACION,
                   '1',
                   PI_CR_PARTES(I).FL_C_VERIFICADO
			   );

END IF;

            -- REGISTRAR CONTACTO

FOR J IN 1..PI_CR_PARTES(I).CR_CONTACTO.COUNT LOOP

	            --INSERTAMOS DATOS DE CONTACTO

	            INSERT INTO SISCFE.CFTV_SUJETO_CONTACTO(
	                 ID_V_SUJETO_CONTACTO,
	                 ID_V_SUJETO_CASO,
	                 ID_N_TIPO_CONTACTO,
	                 NO_V_DATOS_CONTACTO,
	                 FL_C_CONTACTO_SECUNDARIO,
	                 FL_C_ORIGEN,
	                 CO_V_US_CREACION,
	                 ES_C_SUJETO_CONTACTO,
	                 FE_D_CREACION
	            )
	            VALUES(
	                 SYS_GUID(),
	                 V_V_ID_SUJETO_CASO,
	                 PI_CR_PARTES(I).CR_CONTACTO(J).ID_N_TIPO_CONTACTO,
	                 PI_CR_PARTES(I).CR_CONTACTO(J).NO_V_DATOS_CONTACTO,
	                 PI_CR_PARTES(I).CR_CONTACTO(J).FL_C_CONTACTO_SECUNDARIO,
	                 'D',
	                 PI_V_CO_US_CREACION,
	                 '1',
	                 SYSDATE
	            );

END LOOP;

            -- REGISTRAR ALIAS

            IF NVL(PI_CR_PARTES(I).NO_V_ALIAS_SUJETO,'NULL') <> 'NULL' THEN

	            INSERT INTO SISCFE.CFTV_ALIAS_SUJETO(
	                ID_V_ALIAS_SUJETO,
	                ID_V_SUJETO_CASO,
	                NO_V_ALIAS_SUJETO,
	                FE_D_CREACION,
	                CO_V_US_CREACION,
	                ES_C_ALIAS_SUJETO
	            )
	            VALUES(
	                SYS_GUID(),
	                V_V_ID_SUJETO_CASO,
	                PI_CR_PARTES(I).NO_V_ALIAS_SUJETO,
	                SYSDATE,
	                PI_V_CO_US_CREACION,
	                '1'
	            );

END IF;

            -- REGISTRAR DATOS BIOMETRICOS

            IF NVL(PI_CR_PARTES(I).NU_N_PESO,0) <> 0 THEN

                SISMPA.MPPK_REGISTRA_DENUNCIA_TURNO.MPSP_REGISTRAR_FOTO_SUJETO(
					  PI_CR_PARTES(I).FO_B_SUJETO,
					  PI_CR_PARTES(I).NU_N_PESO,
					  V_V_ID_SUJETO_CASO,
					  V_V_ID_PERSONA_NATURAL,
					  PI_CR_PARTES(I).NU_V_DOCUMENTO,
					  PI_V_CO_US_CREACION,
					  PO_V_ERR_COD,
					  PO_V_ERR_MSG
			    );

			    IF PO_V_ERR_COD <> '0' THEN
				 	PO_V_ERR_COD := '42202048';
			     	SISCFE.CFPK_MENSAJE_VALIDACION.CFSP_OBTENER_MENSAJE_VALIDACION(PO_V_ERR_COD, PO_V_ERR_MSG, V_V_COD_ERR, V_V_MSG_ERR);
			     	RAISE EX_CONTROLADO;
END IF;

END IF;

			-- REGISTRAR DIRECCIONES

FOR J IN 1..PI_CR_PARTES(I).CR_DIRECCION.COUNT LOOP

               IF PI_CR_PARTES(I).CR_DIRECCION(J).ID_V_UBIGEO <> '0000' THEN
BEGIN
SELECT ID_N_UBIGEO
INTO V_N_ID_UBIGEO
FROM SISMAEST.CFTM_DIST_GEOGRAFICA
WHERE CO_V_UBIGEO_RENIEC = PI_CR_PARTES(I).CR_DIRECCION(J).ID_V_UBIGEO;

----- RENIEC LA BD no tiene toda la información
EXCEPTION
        			WHEN NO_DATA_FOUND THEN
            			V_N_ID_UBIGEO := NULL;
END ;
ELSE

                 V_N_ID_UBIGEO := NULL;

END IF;

INSERT INTO SISCFE.CFTV_DIRECCION(
    ID_V_DIRECCION,
    ID_N_TIPO_PERSONA,
    ID_V_SUJETO_CASO,
    ID_N_UBIGEO,
    ID_N_TIPO_DOMICILIO,
    CO_V_POSTAL,
    ID_V_UBIGEO_PUEBLO,
    ID_N_TIPO_VIA,
    DI_V_RESIDENCIA,
    NU_N_RESIDENCIA,
    DE_V_BLOCK_DIRECCION,
    DE_V_INTERIOR,
    DE_V_URBANIZACION,
    DE_V_ETAPA,
    DE_V_MANZANA,
    DE_V_LOTE,
    DE_V_REFERENCIA,
    FE_D_CREACION,
    ES_C_DIRECCION,
    CD_V_LATITUD,
    CD_V_LONGITUD,
    ID_N_TIPO_PREF_URB
)
VALUES(
          SYS_GUID(),
          PI_CR_PARTES(I).ID_N_TIPO_PERSONA,
          V_V_ID_SUJETO_CASO,
          V_N_ID_UBIGEO,
          PI_CR_PARTES(I).CR_DIRECCION(J).ID_N_TIPO_DOMICILIO,
          PI_CR_PARTES(I).CR_DIRECCION(J).CO_V_POSTAL,
          PI_CR_PARTES(I).CR_DIRECCION(J).ID_V_UBIGEO_PUEBLO,
          PI_CR_PARTES(I).CR_DIRECCION(J).ID_N_TIPO_VIA,
          PI_CR_PARTES(I).CR_DIRECCION(J).DI_V_RESIDENCIA,
          PI_CR_PARTES(I).CR_DIRECCION(J).NU_N_RESIDENCIA,
          PI_CR_PARTES(I).CR_DIRECCION(J).DE_V_BLOCK_DIRECCION,
          PI_CR_PARTES(I).CR_DIRECCION(J).DE_V_INTERIOR,
          PI_CR_PARTES(I).CR_DIRECCION(J).DE_V_URBANIZACION,
          PI_CR_PARTES(I).CR_DIRECCION(J).DE_V_ETAPA,
          PI_CR_PARTES(I).CR_DIRECCION(J).DE_V_MANZANA,
          PI_CR_PARTES(I).CR_DIRECCION(J).DE_V_LOTE,
          PI_CR_PARTES(I).CR_DIRECCION(J).DE_V_REFERENCIA,
          SYSDATE,
          '1',
          PI_CR_PARTES(I).CR_DIRECCION(J).CD_V_LATITUD,
          PI_CR_PARTES(I).CR_DIRECCION(J).CD_V_LONGITUD,
          PI_CR_PARTES(I).CR_DIRECCION(J).ID_N_TIPO_PREF_URB
      );

END LOOP;

            -- REGISTRAR CONDICION

            IF NVL(PI_CR_PARTES(I).ID_N_TIPO_COND_SUJETO,0) <> 0 THEN

                V_D_FE_DETENCION := NULL;
                V_D_FE_MAXIMA_DETENCION := NULL;

                IF PI_CR_PARTES(I).ID_N_TIPO_COND_SUJETO = 3 THEN --DETENIDO

                     V_D_FE_DETENCION := PI_D_FE_DETENCION;

SELECT NU_N_PLAZO, ID_N_TIPO_UNIDAD
INTO V_N_NU_PLAZO, V_N_ID_TIPO_UNIDAD
FROM SISMAEST.CFTM_PLAZO_TURNO
WHERE ID_V_ESPECIALIDAD = PI_V_ID_ESPECIALIDAD
  AND ES_C_PLAZO_TURNO = '1';

IF V_N_ID_TIPO_UNIDAD = 1 THEN -- HORAS
                     	V_D_FE_MAXIMA_DETENCION := V_D_FE_DETENCION + (V_N_NU_PLAZO/24);
                     ELSIF V_N_ID_TIPO_UNIDAD = 2 THEN -- DIAS
                     	V_D_FE_MAXIMA_DETENCION := V_D_FE_DETENCION + V_N_NU_PLAZO;
                     ELSIF V_N_ID_TIPO_UNIDAD = 3 THEN -- MESES
                     	V_D_FE_MAXIMA_DETENCION := ADD_MONTHS(V_D_FE_DETENCION,V_N_NU_PLAZO);
                     ELSIF V_N_ID_TIPO_UNIDAD = 4 THEN -- AÑOS
                     	V_D_FE_MAXIMA_DETENCION := ADD_MONTHS(V_D_FE_DETENCION,V_N_NU_PLAZO*12);
END IF;

END IF;

INSERT INTO SISMPA.MPTV_SUJETO_CONDICION(
    ID_V_SUJETO_CONDICION,
    ID_N_TIPO_COND_SUJETO,
    ID_V_SUJETO_CASO,
    FE_D_CREACION,
    ES_C_SUJETO_CONDICION,
    CO_V_US_CREACION,
    FE_D_DETENCION,
    FE_D_MAXIMA_DETENCION
)
VALUES(
          SYS_GUID(),
          PI_CR_PARTES(I).ID_N_TIPO_COND_SUJETO,
          V_V_ID_SUJETO_CASO,
          SYSDATE,
          '1',
          PI_V_CO_US_CREACION,
          V_D_FE_DETENCION,
          V_D_FE_MAXIMA_DETENCION
      );

END IF;

END LOOP;

        PO_V_ERR_COD := V_V_COD_OK;
        PO_V_ERR_MSG := V_V_MSG_OK;

EXCEPTION
        WHEN
            EX_CONTROLADO THEN
            DBMS_OUTPUT.PUT_LINE('ERROR CONTROLADO : ' ||
                                 PO_V_ERR_COD || ' - ' ||
                                 PO_V_ERR_MSG);
WHEN
            OTHERS THEN
            PO_V_ERR_COD := '1';
            --PO_V_ERR_MSG := 'REGISTRAR_PARTES_INVOLUCRADAS - ERROR : ' || SQLCODE || ' - ' || SQLERRM;
            PO_V_ERR_MSG := 'REGISTRAR_PARTES_INVOLUCRADAS - ERROR : ' || SQLCODE || ' - ' || SQLERRM || '-' || 'Objeto: ' || dbms_utility.format_error_backtrace() || '--' || dbms_utility.format_error_stack();

END MPSP_REGISTRAR_PARTES_INVOLUCRADAS;




	/***********************************************************************************************
	* Nombre        : SISMPA.MPPK_REGISTRA_DENUNCIA_TURNO.MPSP_REGISTRAR_MOVIMIENTO_INGRESO_DENUNCIA
	* Autor         : Pedro Yarleque Linares
	* Versión       : 1.0
	* Descripción   : Registrar movimiento de caso de cargo de ingreso de denuncia
	* Fecha creación: 12.01.2024
	************************************************************************************************/

	PROCEDURE MPSP_REGISTRAR_MOVIMIENTO_INGRESO_DENUNCIA(
		PI_V_ID_CASO            IN SISEFE.EFTV_MOVIMIENTO.ID_V_CASO%TYPE,
		PI_V_CO_US_CREACION     IN SISEFE.EFTV_MOVIMIENTO.CO_V_US_CREACION%TYPE,
		PO_V_ID_MOVIMIENTO      OUT VARCHAR2,
		PO_D_FE_CREACION        OUT VARCHAR2,
		PO_V_ERR_COD            OUT VARCHAR2,
		PO_V_ERR_MSG            OUT VARCHAR2
	) AS

		V_N_CONTADOR       NUMBER;
	    V_D_FE_CREACION    DATE;

BEGIN

		-- Validar si el caso existe

SELECT COUNT(1)
INTO V_N_CONTADOR
FROM SISEFE.EFTV_CASO ec
WHERE ec.ID_V_CASO = PI_V_ID_CASO
  AND ec.ES_C_CASO = '1';

IF V_N_CONTADOR = 0 THEN
			PO_V_ERR_COD := '42202004';
			SISCFE.CFPK_MENSAJE_VALIDACION.CFSP_OBTENER_MENSAJE_VALIDACION(PO_V_ERR_COD, PO_V_ERR_MSG, V_V_COD_ERR, V_V_MSG_ERR);
		    RAISE EX_CONTROLADO;
END IF;

		-- Registrar movimiento de acta

INSERT INTO SISEFE.EFTV_MOVIMIENTO (
    ID_V_CASO,
    FE_D_CREACION,
    CO_V_US_CREACION,
    ES_C_MOVIMIENTO,
    ID_N_ACCION_ESTADO
) VALUES (
             PI_V_ID_CASO,
             SYSDATE,
             PI_V_CO_US_CREACION,
             '1',
             3 -- Registrar denuncia en Mesa de Turno
         )
    RETURNING ID_V_MOVIMIENTO INTO PO_V_ID_MOVIMIENTO;

SELECT FE_D_CREACION
INTO V_D_FE_CREACION
FROM SISEFE.EFTV_CASO ec
WHERE ec.ID_V_CASO = PI_V_ID_CASO;

PO_D_FE_CREACION := TO_CHAR(V_D_FE_CREACION,'DD/MM/YYYY HH:MI AM');

		PO_V_ERR_COD := V_V_COD_OK;
		PO_V_ERR_MSG := V_V_MSG_OK;

EXCEPTION
        WHEN EX_CONTROLADO THEN
            DBMS_OUTPUT.PUT_LINE('ERROR CONTROLADO : ' ||
                                 PO_V_ERR_COD || ' - ' ||
                                 PO_V_ERR_MSG);
WHEN OTHERS THEN
            PO_V_ERR_COD := '1';
            PO_V_ERR_MSG := 'MPSP_REGISTRAR_MOVIMIENTO_INGRESO_DENUNCIA - ERROR : ' || SQLERRM;

END MPSP_REGISTRAR_MOVIMIENTO_INGRESO_DENUNCIA;


    /*************************************************************************************************
	* Nombre        : SISMPA.MPPK_REGISTRA_DENUNCIA_TURNO.MPSP_OBTENER_DATOS_GENERALES_DENUNCIA_OFICIO
	* Autor         : Pedro Yarleque Linares
	* Versión       : 1.0
	* Descripción   : Obtener datos generales de la denuncia para los casos de Investigación de Oficio
	* Fecha creación: 16.01.2024
	**************************************************************************************************/

	PROCEDURE MPSP_OBTENER_DATOS_GENERALES_DENUNCIA_OFICIO(
		PI_V_ID_CASO            IN SISEFE.EFTV_MOVIMIENTO.ID_V_CASO%TYPE,
		PO_CR_DATOS_GENERALES   OUT SYS_REFCURSOR,
		PO_V_ERR_COD            OUT VARCHAR2,
		PO_V_ERR_MSG            OUT VARCHAR2
	) AS

		V_N_CONTADOR NUMBER;

BEGIN

		-- Validar si el caso existe

SELECT COUNT(1)
INTO V_N_CONTADOR
FROM SISEFE.EFTV_CASO ec
WHERE ec.ID_V_CASO = PI_V_ID_CASO
  AND ec.ES_C_CASO = '1';

IF V_N_CONTADOR = 0 THEN
			PO_V_ERR_COD := '42202004';
			SISCFE.CFPK_MENSAJE_VALIDACION.CFSP_OBTENER_MENSAJE_VALIDACION(PO_V_ERR_COD, PO_V_ERR_MSG, V_V_COD_ERR, V_V_MSG_ERR);
		    RAISE EX_CONTROLADO;
END IF;

		-- Obtener detos generales

OPEN PO_CR_DATOS_GENERALES FOR
SELECT
    ec.CO_V_CASO,
    cdf.NO_V_DISTRITO_FISCAL,
    ce.NO_V_ESPECIALIDAD,
    se.NO_V_ENTIDAD,
    cd.NO_V_DESPACHO,
    TO_CHAR(ec.FE_D_CREACION,'DD/MM/YYYY HH:MI AM') FE_D_CREACION
FROM SISEFE.EFTV_CASO ec
         INNER JOIN SISMPA.MPTV_DENUNCIA md
                    ON ec.ID_V_CASO = md.ID_V_CASO
         INNER JOIN SISMAEST.CFTM_DESPACHO cd
                    ON cd.CO_V_DESPACHO = ec.CO_V_DESPACHO
         INNER JOIN SISMAEST.SATM_ENTIDAD se
                    ON se.CO_V_ENTIDAD = md.CO_V_ENTIDAD
         INNER JOIN SISMAEST.CFTM_DISTRITO_FISCAL cdf
                    ON cdf.ID_N_DISTRITO_FISCAL = se.ID_N_DISTRITO_FISCAL
         INNER JOIN SISMAEST.CFTM_ESPECIALIDAD ce
                    ON ce.ID_V_ESPECIALIDAD = md.ID_V_ESPECIALIDAD
WHERE ec.ID_V_CASO = PI_V_ID_CASO;

EXCEPTION
        WHEN EX_CONTROLADO THEN
            DBMS_OUTPUT.PUT_LINE('ERROR CONTROLADO : ' ||
                                 PO_V_ERR_COD || ' - ' ||
                                 PO_V_ERR_MSG);
WHEN OTHERS THEN
            PO_V_ERR_COD := '1';
            PO_V_ERR_MSG := 'MPSP_OBTENER_DATOS_GENERALES_DENUNCIA_OFICIO - ERROR : ' || SQLERRM;

END MPSP_OBTENER_DATOS_GENERALES_DENUNCIA_OFICIO;

    /**************************************************************************************************
	* Nombre        : SISMPA.MPPK_REGISTRA_DENUNCIA_TURNO.MPSP_FOLIAR_DOCUMENTOS_REGISTRADOS
	* Autor         : Pedro Yarleque Linares
	* Versión       : 1.0
	* Descripción   : Luego de Registrar el Cargo de Ingreso de Denuncia, se realiza el foliado de los
	*                 documentos subidos que incluye tanto el cargo de ingreso de denuncia como las
	*                 actas que hayan podido ser registradas.
	* Fecha creación: 16.01.2024
	***************************************************************************************************/

	PROCEDURE MPSP_FOLIAR_DOCUMENTOS_REGISTRADOS(
		PI_V_ID_CASO            IN SISEFE.EFTV_MOVIMIENTO.ID_V_CASO%TYPE,
		PI_V_CO_US_MODIFICACION IN SISEFE.EFTV_MOVIMIENTO .CO_V_US_MODIFICACION%TYPE,
		PO_V_ERR_COD            OUT VARCHAR2,
		PO_V_ERR_MSG            OUT VARCHAR2
	) AS

	-- no se debe usar este sp ya que el ms de documento realiza la foliacion
		CURSOR CR_CARGO_INGRESO IS
SELECT ID_V_DOCUMENTO, NU_N_FOLIO_TOTAL
FROM SISCFE.CFTV_DOCUMENTO cd
WHERE cd.ID_C_TIPO_DOCUMENTO = '08' -- CARGO DE INGRESO DE DENUNCIA
  AND cd.ID_N_TIPO_ORIGEN = 4
  AND cd.ID_V_CASO = PI_V_ID_CASO
ORDER BY cd.FE_D_CREACION DESC;

CURSOR CR_ACTAS IS
SELECT ID_V_DOCUMENTO, NU_N_FOLIO_TOTAL
FROM SISCFE.CFTV_DOCUMENTO cd
WHERE cd.ID_C_TIPO_DOCUMENTO = '05' -- ACTAS
  AND cd.ID_N_TIPO_ORIGEN = 4
  AND cd.ID_V_CASO = PI_V_ID_CASO
ORDER BY cd.FE_D_CREACION DESC;

V_N_NU_FOLIO_INI NUMBER := 1;
		V_N_NU_FOLIO_FIN NUMBER := 0;

BEGIN

		-- FOLIAR CARGO DE INGRESO DE DENUNCIA

FOR DOCUMENTO IN CR_CARGO_INGRESO LOOP

			V_N_NU_FOLIO_FIN := DOCUMENTO.NU_N_FOLIO_TOTAL;

UPDATE SISCFE.CFTV_DOCUMENTO
SET NU_N_FOLIO_INI = V_N_NU_FOLIO_INI,
    NU_N_FOLIO_FIN = V_N_NU_FOLIO_FIN,
    FE_D_MODIFICACION = SYSDATE,
    CO_V_US_MODIFICACION = PI_V_CO_US_MODIFICACION
WHERE ID_V_CASO = PI_V_ID_CASO
  AND ID_V_DOCUMENTO = DOCUMENTO.ID_V_DOCUMENTO;

END LOOP;

		-- FOLIAR ACTAS REGISTRADAS

FOR DOCUMENTO IN CR_ACTAS LOOP

		    V_N_NU_FOLIO_INI := V_N_NU_FOLIO_FIN + 1;
			V_N_NU_FOLIO_FIN := V_N_NU_FOLIO_INI + DOCUMENTO.NU_N_FOLIO_TOTAL - 1;

UPDATE SISCFE.CFTV_DOCUMENTO
SET NU_N_FOLIO_INI = V_N_NU_FOLIO_INI,
    NU_N_FOLIO_FIN = V_N_NU_FOLIO_FIN,
    FE_D_MODIFICACION = SYSDATE,
    CO_V_US_MODIFICACION = PI_V_CO_US_MODIFICACION
WHERE ID_V_CASO = PI_V_ID_CASO
  AND ID_V_DOCUMENTO = DOCUMENTO.ID_V_DOCUMENTO;

END LOOP;

		PO_V_ERR_COD := V_V_COD_OK;
		PO_V_ERR_MSG := V_V_MSG_OK;

EXCEPTION
        WHEN EX_CONTROLADO THEN
            DBMS_OUTPUT.PUT_LINE('ERROR CONTROLADO : ' ||
                                 PO_V_ERR_COD || ' - ' ||
                                 PO_V_ERR_MSG);
WHEN OTHERS THEN
            PO_V_ERR_COD := '1';
            PO_V_ERR_MSG := 'MPSP_FOLIAR_DOCUMENTOS_REGISTRADOS - ERROR : ' || SQLERRM;

END MPSP_FOLIAR_DOCUMENTOS_REGISTRADOS;

   	/*********************************************************************************
	* Nombre        : SISMPA.MPPK_REGISTRA_DENUNCIA_TURNO.MPSP_REGISTRAR_FOTO_SUJETO
	* Autor         : Pedro Yarleque Linares
	* Versión       : 1.0
	* Descripción   : Registrar foto del sujeto caso
	* Fecha creación: 30.01.2024
	**********************************************************************************/

    PROCEDURE MPSP_REGISTRAR_FOTO_SUJETO(
		  PI_BL_FOTO_SUJETO        IN BLOB,
		  PI_N_NU_PESO             IN SISCFE.CFTV_REGISTROS_BIOMETRICOS.NU_N_PESO%TYPE,
		  PI_V_ID_SUJETO_CASO      IN SISCFE.CFTV_SUJETO_CASO.ID_V_SUJETO_cASO%TYPE,
		  PI_V_ID_PERSONA          IN SISCFE.CFTV_PERSONA_NATURAL.ID_V_PERSONA_NATURAL%TYPE,
		  PI_V_NO_DOCUMENTO_ORIGEN IN SISCFE.CFTV_REGISTROS_BIOMETRICOS.NO_V_DOCUMENTO_ORIGEN%TYPE,
		  PI_V_CO_US_CREACION      IN SISCFE.CFTV_REGISTROS_BIOMETRICOS.CO_V_US_CREACION%TYPE,
		  PO_V_ERR_COD             OUT VARCHAR2,
		  PO_V_ERR_MSG             OUT VARCHAR2
    ) AS

     L_FILE        UTL_FILE.FILE_TYPE;
     L_POS         NUMBER := 1;
     L_BLOB_LEN    NUMBER;
     L_AMOUNT      BINARY_INTEGER := 32767;
     L_BUFFER      RAW(32767);

     V_V_ID_REGISTROS_BIOMETRICOS  VARCHAR2(40) := '';
     V_V_DE_PATH_DOCUMENTO         SISCFE.CFTV_REGISTROS_BIOMETRICOS.DE_V_PATH_DOCUMENTO%TYPE := '/OPT/CARPETA_FISCAL/CP_FOTO';
     V_V_NO_DIRECTORIO             SISCFE.CFTV_REGISTROS_BIOMETRICOS.NO_V_DIRECTORIO%TYPE := 'EFDI_CP_FOTO';
     V_N_ID_OAID                   NUMBER := 10;
     V_N_ID_CATALOGO               NUMBER := 242; -- Foto

BEGIN

        -- Obtener la longitud del BLOB
        L_BLOB_LEN := DBMS_LOB.GETLENGTH(PI_BL_FOTO_SUJETO);

        -- Abrir el archivo en modo binario de escritura (wb)
        L_FILE := UTL_FILE.FOPEN_NCHAR(V_V_NO_DIRECTORIO,PI_V_NO_DOCUMENTO_ORIGEN,'WB', 32767);

        -- Bucle para escribir el BLOB en el archivo
        WHILE L_POS < L_BLOB_LEN LOOP
            DBMS_LOB.READ(PI_BL_FOTO_SUJETO, L_AMOUNT, L_POS, L_BUFFER);
            UTL_FILE.PUT_RAW(L_FILE, L_BUFFER, TRUE);
            L_POS := L_POS + L_AMOUNT;
END LOOP;

        UTL_FILE.FCLOSE(L_FILE);

INSERT INTO SISCFE.CFTV_REGISTROS_BIOMETRICOS (
    ID_V_REGISTROS_BIOMETRICOS,
    NU_N_PESO,
    IN_B_REPOSITORIO,
    NO_V_DOCUMENTO_ORIGEN,
    DE_V_PATH_DOCUMENTO,
    NO_V_DOCUMENTO_FICHERO,
    ID_N_OAID,
    NO_V_DIRECTORIO,
    CO_V_US_CREACION)
VALUES(
          SYS_GUID(),
          PI_N_NU_PESO,
          BFILENAME (V_V_NO_DIRECTORIO,PI_V_NO_DOCUMENTO_ORIGEN),
          CONCAT(PI_V_NO_DOCUMENTO_ORIGEN,'.png'),
          V_V_DE_PATH_DOCUMENTO,
          PI_V_NO_DOCUMENTO_ORIGEN,
          V_N_ID_OAID,
          V_V_NO_DIRECTORIO,
          PI_V_CO_US_CREACION
      ) RETURNING ID_V_REGISTROS_BIOMETRICOS INTO V_V_ID_REGISTROS_BIOMETRICOS;

INSERT INTO SISCFE.CFTV_DATOS_BIOMETRICOS_SUJETOS (
    ID_V_DATOS_BIOMETRICOS_SUJETOS,
    ID_V_REGISTROS_BIOMETRICOS,
    ID_V_SUJETO_CASO,
    ID_N_TIPO_BIOMETRICO
)
VALUES(
          SYS_GUID(),
          V_V_ID_REGISTROS_BIOMETRICOS,
          PI_V_ID_SUJETO_CASO,
          V_N_ID_CATALOGO
      );

UPDATE SISCFE.CFTV_PERSONA_NATURAL
SET ID_V_REGISTROS_BIOMETRICOS = V_V_ID_REGISTROS_BIOMETRICOS
WHERE ID_V_PERSONA = PI_V_ID_PERSONA;

UPDATE SISCFE.CFTV_SUJETO_CASO_DETALLE
SET ID_V_REGISTROS_BIOMETRICOS = V_V_ID_REGISTROS_BIOMETRICOS
WHERE ID_V_SUJETO_CASO = ID_V_SUJETO_CASO;

PO_V_ERR_COD := V_V_COD_OK;
        PO_V_ERR_MSG := V_V_MSG_OK;

EXCEPTION
        WHEN EX_CONTROLADO THEN
            DBMS_OUTPUT.PUT_LINE('ERROR CONTROLADO : ' ||
                                 PO_V_ERR_COD || ' - ' ||
                                 PO_V_ERR_MSG);
WHEN OTHERS THEN
            PO_V_ERR_COD := '1';
            PO_V_ERR_MSG := 'MPSP_REGISTRA_FOTO_SUJETO - ERROR : ' || SQLERRM;

END MPSP_REGISTRAR_FOTO_SUJETO;

    /*********************************************************************************
	* Nombre        : SISMPA.MPPK_REGISTRA_DENUNCIA_TURNO.MPFN_OBTENER_ESPECIALIDAD
	* Autor         : Pedro Yarleque Linares
	* Versión       : 1.0
	* Descripción   : Función para obtener la descripción de la especialidad
	* Fecha creación: 21.02.2024
	**********************************************************************************/

    FUNCTION MPFN_OBTENER_ESPECIALIDAD (
        PI_V_ID_ESPECIALIDAD   SISMAEST.CFTM_ESPECIALIDAD.ID_V_ESPECIALIDAD%TYPE
    )
    RETURN VARCHAR2 IS
	     V_V_NO_ESPECIALIDAD VARCHAR2(1000) := '';
	     V_N_CONTADOR        NUMBER;
BEGIN

SELECT COUNT(1)
INTO V_N_CONTADOR
FROM SISMAEST.CFTM_ESPECIALIDAD ce
WHERE ce.ID_V_ESPECIALIDAD = PI_V_ID_ESPECIALIDAD;

IF V_N_CONTADOR = 0 THEN
	         RETURN 'POR ASIGNAR';
END IF;

SELECT NO_V_ESPECIALIDAD
INTO V_V_NO_ESPECIALIDAD
FROM SISMAEST.CFTM_ESPECIALIDAD ce
WHERE ce.ID_V_ESPECIALIDAD = PI_V_ID_ESPECIALIDAD;

RETURN V_V_NO_ESPECIALIDAD;

EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE( 'MPFN_OBTENER_ESPECIALIDAD - ERROR : ' || SQLERRM );
END MPFN_OBTENER_ESPECIALIDAD;


    PROCEDURE MPSP_IDENTIFICAR_DENUNCIA_DUPLICADA(
    											PI_CU_PARTICIPANTES_DENUNCIA_DUPLICADA	IN PARTICIPANTES_DENUNCIA_DUPLICADA,
                                                PI_CU_DELITOS_DENUNCIA_DUPLICADA IN DELITO,
                                                PO_V_CO_RESPUESTA OUT VARCHAR2,
                                                PO_V_CO_CASO OUT VARCHAR2,
                                                PO_V_ERR_COD OUT VARCHAR2,
                                                PO_V_ERR_MSG OUT VARCHAR2) IS

        V_N_NUM_ROWS                    	NUMBER := 0;
        V_N_NUM_SUJETOS_RECORRIDO       	NUMBER := 0;
        V_N_NUM_DENUNCIAS_RECORRIDO     	NUMBER := 0;
        V_V_ID_PERSONA                  	SISCFE.CFTV_PERSONA.ID_V_PERSONA%TYPE;
        V_TAB_ID_DENUNCIA               	TAB_ID_DENUNCIA;
        V_REC_ID_DENUNCIA               	REC_ID_DENUNCIA;
        V_N_CANT                        	NUMBER:=0;
        V_V_ID_DENUNCIA                 	SISMPA.MPTV_DENUNCIA.ID_V_DENUNCIA%TYPE;
        V_N_CONTROL                     	NUMBER:=0;
        V_N_COUNT                       	NUMBER;
        V_V_ID_DENUNCIA_FIND            	SISMPA.MPTV_DENUNCIA.ID_V_DENUNCIA%TYPE;
        V_N_COUNT_TOTAL_SUJETOS         	NUMBER:=0;
        V_N_COUNT_TOTAL_SUJETOS_CURSOR  	NUMBER:=0;
        V_N_SALIDA                      	NUMBER;
        V_V_ID_DENUNCIA2                	SISMPA.MPTV_DENUNCIA.ID_V_DENUNCIA%TYPE;
        V_V_CO_CASO                     	SISEFE.EFTV_CASO.CO_V_CASO%TYPE;
        LISTA_DELITOS                   	DELITO;
        V_N_CANTIDAD_DELITOS            	NUMBER;
        V_N_CANT_DELITOS_DENUNCIA       	NUMBER;
        V_N_CANT_DELITOS_RECORRIDOS     	NUMBER;
        V_N_EXISTE_DELITO_DENUNCIA 			NUMBER:=0;

BEGIN
	    PO_V_CO_RESPUESTA := '0';
        V_TAB_ID_DENUNCIA:=TAB_ID_DENUNCIA();
        LISTA_DELITOS:=DELITO();
        V_N_CANTIDAD_DELITOS:=PI_CU_DELITOS_DENUNCIA_DUPLICADA.COUNT;

             IF PI_CU_PARTICIPANTES_DENUNCIA_DUPLICADA IS NOT NULL THEN
                FOR I IN 1.. PI_CU_PARTICIPANTES_DENUNCIA_DUPLICADA.COUNT LOOP
                     IF (PI_CU_PARTICIPANTES_DENUNCIA_DUPLICADA(I).ID_TIPO_PARTE_SUJETO = 1 OR PI_CU_PARTICIPANTES_DENUNCIA_DUPLICADA(I).ID_TIPO_PARTE_SUJETO = 2) THEN
                       V_N_COUNT_TOTAL_SUJETOS_CURSOR:=V_N_COUNT_TOTAL_SUJETOS_CURSOR+1;
END IF;
END LOOP;

FOR I IN 1.. 1 LOOP
                     IF (PI_CU_PARTICIPANTES_DENUNCIA_DUPLICADA(I).ID_TIPO_PARTE_SUJETO = 1 OR PI_CU_PARTICIPANTES_DENUNCIA_DUPLICADA(I).ID_TIPO_PARTE_SUJETO = 2)   THEN
                        V_N_CONTROL:=1;

SELECT COUNT(*) INTO V_N_NUM_ROWS
FROM  SISCFE.CFTV_PERSONA
WHERE ID_N_TIPO_DOC_IDENT = PI_CU_PARTICIPANTES_DENUNCIA_DUPLICADA(I).ID_TIPO_DOC_IDENT  AND
    NU_V_DOCUMENTO      = PI_CU_PARTICIPANTES_DENUNCIA_DUPLICADA(I).NU_DOCUMENTO;

IF V_N_NUM_ROWS >= 1 THEN
SELECT ID_V_PERSONA INTO V_V_ID_PERSONA
FROM  SISCFE.CFTV_PERSONA
WHERE ID_N_TIPO_DOC_IDENT = PI_CU_PARTICIPANTES_DENUNCIA_DUPLICADA(I).ID_TIPO_DOC_IDENT
  AND NU_V_DOCUMENTO = PI_CU_PARTICIPANTES_DENUNCIA_DUPLICADA(I).NU_DOCUMENTO
  AND ES_C_PERSONA = '1'
    FETCH FIRST 1 ROWS ONLY;

DECLARE
CURSOR C1 IS
SELECT  SC.ID_V_DENUNCIA
FROM SISCFE.CFTV_SUJETO_CASO SC, SISMPA.MPTV_DENUNCIA DE
WHERE SC.ID_V_DENUNCIA =  DE.ID_V_DENUNCIA
  AND SC.ID_V_PERSONA = V_V_ID_PERSONA
  AND SC.ID_N_TIPO_PARTE_SUJETO = PI_CU_PARTICIPANTES_DENUNCIA_DUPLICADA(I).ID_TIPO_PARTE_SUJETO
  AND DE.ID_N_TIPO_ORIGEN <> 1;

BEGIN
FOR X IN C1 LOOP
                                    V_V_ID_DENUNCIA:=X.ID_V_DENUNCIA;

SELECT COUNT(ID_N_DELITO) INTO V_N_CANT_DELITOS_DENUNCIA
FROM SISMPA.MPTV_DELITO_DENUNCIA
WHERE ID_V_DENUNCIA =V_V_ID_DENUNCIA;

IF V_N_CANT_DELITOS_DENUNCIA=V_N_CANTIDAD_DELITOS THEN
SELECT COUNT(*) INTO V_N_COUNT_TOTAL_SUJETOS
FROM SISCFE.CFTV_SUJETO_CASO
WHERE 1 = 1
  AND ID_V_DENUNCIA  = V_V_ID_DENUNCIA
  AND ID_N_TIPO_PARTE_SUJETO IN (1,2);

IF V_N_COUNT_TOTAL_SUJETOS=V_N_COUNT_TOTAL_SUJETOS_CURSOR THEN--SI LA CANTIDAD DE SUJETOS DE LA DENUNCIA ES IGUAL
                                                V_N_CANT_DELITOS_RECORRIDOS:=0;

FOR P IN 1..PI_CU_DELITOS_DENUNCIA_DUPLICADA.COUNT
                                               		 LOOP V_N_CANT_DELITOS_RECORRIDOS:=V_N_CANT_DELITOS_RECORRIDOS+1;
SELECT COUNT(*) INTO V_N_EXISTE_DELITO_DENUNCIA--DELITO+DENUNCIA EXISTE?
FROM SISMPA.MPTV_DELITO_DENUNCIA
WHERE ID_V_DENUNCIA=V_V_ID_DENUNCIA
  AND ID_N_DELITO=PI_CU_DELITOS_DENUNCIA_DUPLICADA(P).ID_DELITO
  AND ID_N_ESPECIFICO=PI_CU_DELITOS_DENUNCIA_DUPLICADA(P).ID_DELITO_ESPECIFICO
  AND ID_N_SUBGENERICO=PI_CU_DELITOS_DENUNCIA_DUPLICADA(P).ID_SUBGENERICO;

IF V_N_EXISTE_DELITO_DENUNCIA=1 THEN
                                                     	IF V_N_CANT_DELITOS_RECORRIDOS=V_N_CANTIDAD_DELITOS THEN
                                                           V_REC_ID_DENUNCIA.ID_V_DENUNCIA :=V_V_ID_DENUNCIA;
                                                           V_TAB_ID_DENUNCIA.EXTEND(1);
                                                           V_N_CANT := V_N_CANT + 1;
                                                           V_TAB_ID_DENUNCIA(V_N_CANT):=V_REC_ID_DENUNCIA;
END IF;
ELSE
                                                       EXIT;
END IF;
END LOOP;
END IF;
                                   /* ELSE
                                      EXIT;  */
END IF;
END LOOP;
END;
ELSE
                            V_N_CONTROL:=0;
                            PO_V_CO_RESPUESTA := '0';
END IF;
END IF;
END LOOP;

               --TTT:=V_TAB_ID_DENUNCIA.COUNT;
                IF V_N_CONTROL=1 AND V_TAB_ID_DENUNCIA.COUNT > 0 THEN
                  FOR X IN 1..V_TAB_ID_DENUNCIA.COUNT  LOOP
                       V_N_NUM_DENUNCIAS_RECORRIDO:=V_N_NUM_DENUNCIAS_RECORRIDO+1;
                       V_V_ID_DENUNCIA2:= V_TAB_ID_DENUNCIA(X).ID_V_DENUNCIA;
                       V_V_ID_DENUNCIA_FIND:='';
                       V_N_NUM_SUJETOS_RECORRIDO:=0;

FOR I IN 1.. PI_CU_PARTICIPANTES_DENUNCIA_DUPLICADA.COUNT LOOP

                             V_N_NUM_SUJETOS_RECORRIDO:=V_N_NUM_SUJETOS_RECORRIDO+1;

                             IF (PI_CU_PARTICIPANTES_DENUNCIA_DUPLICADA(I).ID_TIPO_PARTE_SUJETO = 1 OR
                                 PI_CU_PARTICIPANTES_DENUNCIA_DUPLICADA(I).ID_TIPO_PARTE_SUJETO = 2) THEN

SELECT COUNT(*) INTO V_N_NUM_ROWS
FROM  SISCFE.CFTV_PERSONA
WHERE 1 = 1
  AND ID_N_TIPO_DOC_IDENT = PI_CU_PARTICIPANTES_DENUNCIA_DUPLICADA(I).ID_TIPO_DOC_IDENT
  AND NU_V_DOCUMENTO = PI_CU_PARTICIPANTES_DENUNCIA_DUPLICADA(I).NU_DOCUMENTO;

IF V_N_NUM_ROWS >= 1 THEN
SELECT ID_V_PERSONA INTO V_V_ID_PERSONA
FROM  SISCFE.CFTV_PERSONA
WHERE 1 = 1
  AND ID_N_TIPO_DOC_IDENT = PI_CU_PARTICIPANTES_DENUNCIA_DUPLICADA(I).ID_TIPO_DOC_IDENT
  AND NU_V_DOCUMENTO = PI_CU_PARTICIPANTES_DENUNCIA_DUPLICADA(I).NU_DOCUMENTO
    FETCH FIRST 1 ROWS ONLY;

IF V_V_ID_DENUNCIA_FIND IS NOT NULL THEN
SELECT COUNT(*) INTO V_N_COUNT
FROM SISCFE.CFTV_SUJETO_CASO SC, SISMPA.MPTV_DENUNCIA DE
WHERE 1 = 1
  AND SC.ID_V_DENUNCIA = DE.ID_V_DENUNCIA
  AND SC.ID_V_PERSONA = V_V_ID_PERSONA
  AND SC.ID_N_TIPO_PARTE_SUJETO = PI_CU_PARTICIPANTES_DENUNCIA_DUPLICADA(I).ID_TIPO_PARTE_SUJETO
  AND SC.ID_V_DENUNCIA = V_V_ID_DENUNCIA_FIND
  AND DE.ID_N_TIPO_ORIGEN <> 1;

IF V_N_COUNT>0 THEN
	                                       	IF V_N_NUM_SUJETOS_RECORRIDO=V_N_COUNT_TOTAL_SUJETOS_CURSOR THEN
                                           		V_N_SALIDA := 1;--HAY DUPLICADO
END IF;

ELSE
                                            	V_V_ID_DENUNCIA_FIND :='';

                                       			IF V_N_NUM_DENUNCIAS_RECORRIDO=V_TAB_ID_DENUNCIA.COUNT THEN
                                                	V_N_SALIDA := 0;--NO HAY DUPLICADO
                                                	EXIT;
ELSE
                                                	EXIT;
END IF;
END IF;
ELSE
SELECT COUNT(*) INTO V_N_COUNT
FROM SISCFE.CFTV_SUJETO_CASO SC, SISMPA.MPTV_DENUNCIA DE
WHERE 1 = 1
  AND SC.ID_V_DENUNCIA = DE.ID_V_DENUNCIA
  AND SC.ID_V_PERSONA = V_V_ID_PERSONA
  AND SC.ID_N_TIPO_PARTE_SUJETO = PI_CU_PARTICIPANTES_DENUNCIA_DUPLICADA(I).ID_TIPO_PARTE_SUJETO
  AND SC.ID_V_DENUNCIA = V_V_ID_DENUNCIA2
  AND DE.ID_N_TIPO_ORIGEN <> 1;

IF V_N_COUNT >0 THEN
                                            	V_V_ID_DENUNCIA_FIND:=V_V_ID_DENUNCIA2;
END IF;
END IF ;
ELSE
                                 IF V_N_NUM_DENUNCIAS_RECORRIDO=V_TAB_ID_DENUNCIA.COUNT THEN
                                    V_N_SALIDA := 0;--NO HAY DUPLICADO
                                    EXIT;
ELSE
                                    EXIT;
END IF;
END IF;--FIN DEL IF V_N_NUM_ROWS >= 1
END IF;--FIN DEL IF ID_TIPO_PARTE_SUJETO IN 1,2
END LOOP;

                         IF V_N_SALIDA =0 THEN
                               PO_V_CO_RESPUESTA:='0';
                               PO_V_CO_CASO := '';
                               --EXIT;
                         ELSIF V_N_SALIDA=1 THEN

SELECT CO_V_CASO INTO V_V_CO_CASO
FROM SISEFE.EFTV_CASO
WHERE SISEFE.EFTV_CASO.ID_V_DENUNCIA =  V_V_ID_DENUNCIA_FIND;
PO_V_CO_CASO := V_V_CO_CASO;
                               PO_V_CO_RESPUESTA:='1';

                               EXIT;
END IF;
END LOOP;
ELSE
                 PO_V_CO_RESPUESTA:='0';
END IF;
END IF;

        PO_V_ERR_COD := V_V_COD_OK;
        PO_V_ERR_MSG := V_V_MSG_OK;

EXCEPTION
            WHEN OTHERS THEN
	            PO_V_ERR_COD := '1';
	            PO_V_ERR_MSG := SQLERRM || '-' || ' EN MPSP_IDENTIFICAR_DENUNCIA_DUPLICADA: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE() || '--' || DBMS_UTILITY.FORMAT_ERROR_STACK();
END;

END MPPK_REGISTRA_DENUNCIA_TURNO;

/